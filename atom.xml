<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>快乐崇拜的技术博客</title>
  <subtitle>聪明出于勤奋，天才在于积累</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="ttp://liubenlong.github.io/"/>
  <updated>2016-12-13T11:49:46.263Z</updated>
  <id>ttp://liubenlong.github.io/</id>
  
  <author>
    <name>liubenlong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>disruptor学习教程（一）helloWord</title>
    <link href="ttp://liubenlong.github.io/2016/12/13/java%E9%AB%98%E5%B9%B6%E5%8F%91/Disruptor/disruptor%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89helloWord/"/>
    <id>ttp://liubenlong.github.io/2016/12/13/java高并发/Disruptor/disruptor学习教程（一）helloWord/</id>
    <published>2016-12-12T16:00:00.000Z</published>
    <updated>2016-12-13T11:49:46.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是-Disruptor"><a href="#一、什么是-Disruptor" class="headerlink" title="一、什么是 Disruptor"></a>一、什么是 Disruptor</h1><p>从功能上来看，Disruptor 是实现了“队列”的功能，而且是一个有界队列。那么它的应用场景自然就是“生产者-消费者”模型的应用场合了。</p>
<p>可以拿 JDK 的 BlockingQueue 做一个简单对比，以便更好地认识 Disruptor 是什么。</p>
<p>我们知道 BlockingQueue 是一个 FIFO 队列，生产者(Producer)往队列里发布(publish)一项事件(或称之为“消息”也可以)时，消费者(Consumer)能获得通知；如果没有事件时，消费者被堵塞，直到生产者发布了新的事件。</p>
<p>这些都是 Disruptor 能做到的，与之不同的是，Disruptor 能做更多：</p>
<p>同一个“事件”可以有多个消费者，消费者之间既可以并行处理，也可以相互依赖形成处理的先后次序(形成一个依赖图)；<br>预分配用于存储事件内容的内存空间；<br>针对极高的性能目标而实现的极度优化和无锁的设计；<br>以上的描述虽然简单地指出了 Disruptor 是什么，但对于它“能做什么”还不是那么直截了当。一般性地来说，当你需要在两个独立的处理过程(两个线程)之间交换数据时，就可以使用 Disruptor 。当然使用队列（如上面提到的 BlockingQueue）也可以，只不过 Disruptor 做得更好。</p>
<p>拿队列来作比较的做法弱化了对 Disruptor 有多强大的认识，如果想要对此有更多的了解，可以仔细看看 Disruptor 在其东家 LMAX 交易平台(也是实现者) 是如何作为核心架构来使用的，这方面就不做详述了，问度娘或谷哥都能找到。</p>
<h1 id="二、Disruptor-的核心概念"><a href="#二、Disruptor-的核心概念" class="headerlink" title="二、Disruptor 的核心概念"></a>二、Disruptor 的核心概念</h1><p>先从了解 Disruptor 的核心概念开始，来了解它是如何运作的。下面介绍的概念模型，既是领域对象，也是映射到代码实现上的核心对象。</p>
<ul>
<li><strong>Ring Buffer</strong><br>如其名，环形的缓冲区。曾经 RingBuffer 是 Disruptor 中的最主要的对象，但从3.0版本开始，其职责被简化为仅仅负责对通过 Disruptor 进行交换的数据（事件）进行存储和更新。在一些更高级的应用场景中，Ring Buffer 可以由用户的自定义实现来完全替代。</li>
<li><strong>Sequence  Disruptor</strong><br>通过顺序递增的序号来编号管理通过其进行交换的数据（事件），对数据(事件)的处理过程总是沿着序号逐个递增处理。一个 Sequence 用于跟踪标识某个特定的事件处理者( RingBuffer/Consumer )的处理进度。虽然一个 AtomicLong 也可以用于标识进度，但定义 Sequence 来负责该问题还有另一个目的，那就是防止不同的 Sequence 之间的CPU缓存伪共享(Flase Sharing)问题。<br>（注：这是 Disruptor 实现高性能的关键点之一，网上关于伪共享问题的介绍已经汗牛充栋，在此不再赘述）。</li>
<li><strong>Sequencer </strong><br>Sequencer 是 Disruptor 的真正核心。此接口有两个实现类 SingleProducerSequencer、MultiProducerSequencer ，它们定义在生产者和消费者之间快速、正确地传递数据的并发算法。</li>
<li><strong>Sequence Barrier</strong><br>用于保持对RingBuffer的 main published Sequence 和Consumer依赖的其它Consumer的 Sequence 的引用。 Sequence Barrier 还定义了决定 Consumer 是否还有可处理的事件的逻辑。</li>
<li><strong>Wait Strategy</strong><br>定义 Consumer 如何进行等待下一个事件的策略。 （注：Disruptor 定义了多种不同的策略，针对不同的场景，提供了不一样的性能表现）</li>
<li><strong>Event</strong><br>在 Disruptor 的语义中，生产者和消费者之间进行交换的数据被称为事件(Event)。它不是一个被 Disruptor 定义的特定类型，而是由 Disruptor 的使用者定义并指定。</li>
<li><strong>EventProcessor</strong><br>EventProcessor 持有特定消费者(Consumer)的 Sequence，并提供用于调用事件处理实现的事件循环(Event Loop)。</li>
<li><strong>EventHandler</strong><br>Disruptor 定义的事件处理接口，由用户实现，用于处理事件，是 Consumer 的真正实现。</li>
<li><strong>Producer</strong><br>即生产者，只是泛指调用 Disruptor 发布事件的用户代码，Disruptor 没有定义特定接口或类型。</li>
</ul>
<h1 id="helloword小程序"><a href="#helloword小程序" class="headerlink" title="helloword小程序"></a>helloword小程序</h1><p><em>参考官网的入门示例</em></p>
<ol>
<li><p>定义事件<br> 事件(Event)就是通过 Disruptor 进行交换的数据类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongEvent</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> value;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> value)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义事件工厂</p>
</li>
</ol>
<p>事件工厂(Event Factory)定义了如何实例化前面第1步中定义的事件(Event)，需要实现接口 com.lmax.disruptor.EventFactory<t>。<br>Disruptor 通过 EventFactory 在 RingBuffer 中预创建 Event 的实例。<br>一个 Event 实例实际上被用作一个“数据槽”，发布者发布前，先从 RingBuffer 获得一个 Event 的实例，然后往 Event 实例中填充数据，之后再发布到 RingBuffer 中，之后由 Consumer 获得该 Event 实例并从中读取数据。</t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.lmax.disruptor.EventFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongEventFactory</span> <span class="keyword">implements</span> <span class="title">EventFactory</span>&lt;<span class="title">LongEvent</span>&gt;</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> LongEvent <span class="title">newInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LongEvent();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>消费者–定义事件处理的具体实现<br>通过实现接口 com.lmax.disruptor.EventHandler<t> 定义事件处理的具体实现。</t></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.lmax.disruptor.EventHandler;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongEventHandler</span> <span class="keyword">implements</span> <span class="title">EventHandler</span>&lt;<span class="title">LongEvent</span>&gt;</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;<span class="comment">//消费者id</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LongEventHandler</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.index = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LongEventHandler</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(LongEvent event, <span class="keyword">long</span> sequence, <span class="keyword">boolean</span> endOfBatch)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        System.out.println(String.format(<span class="string">"index=%s, sequence=%s, Event=%s endOfBatch=%s"</span>, index, sequence, event.getValue(), endOfBatch));</div><div class="line"><span class="comment">//        Thread.sleep(100);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>定义用于事件处理(消费者)的线程池</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ExecutorService executor = Executors.newCachedThreadPool();</div></pre></td></tr></table></figure>
</li>
<li><p>指定等待策略</p>
</li>
</ol>
<p>Disruptor 定义了 com.lmax.disruptor.WaitStrategy 接口用于抽象 Consumer 如何等待新事件，这是策略模式的应用。<br>Disruptor 提供了多个 WaitStrategy 的实现，每种策略都具有不同性能和优缺点，根据实际运行环境的 CPU 的硬件特点选择恰当的策略，并配合特定的 JVM 的配置参数，能够实现不同的性能提升。<br>例如，BlockingWaitStrategy、SleepingWaitStrategy、YieldingWaitStrategy 等，其中，<br>BlockingWaitStrategy 是最低效的策略，但其对CPU的消耗最小并且在各种不同部署环境中能提供更加一致的性能表现；<br>SleepingWaitStrategy 的性能表现跟 BlockingWaitStrategy 差不多，对 CPU 的消耗也类似，但其对生产者线程的影响最小，适合用于异步日志类似的场景；<br>YieldingWaitStrategy 的性能是最好的，适合用于低延迟的系统。在要求极高性能且事件处理线数小于 CPU 逻辑核心数的场景中，推荐使用此策略；例如，CPU开启超线程的特性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">WaitStrategy BLOCKING_WAIT = new BlockingWaitStrategy();</div><div class="line">WaitStrategy SLEEPING_WAIT = new SleepingWaitStrategy();</div><div class="line">WaitStrategy YIELDING_WAIT = new YieldingWaitStrategy();</div></pre></td></tr></table></figure>
<ol>
<li>生产（发布）消息</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.lmax.disruptor.RingBuffer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 生产者</div><div class="line"> * 发布事件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongEventProducer</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RingBuffer&lt;LongEvent&gt; ringBuffer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LongEventProducer</span><span class="params">(RingBuffer&lt;LongEvent&gt; ringBuffer)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.ringBuffer = ringBuffer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onData</span><span class="params">(ByteBuffer bb)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> sequence = ringBuffer.next();  <span class="comment">// Grab the next sequence  请求下一个事件序号；</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            LongEvent event = ringBuffer.get(sequence); <span class="comment">// Get the entry in the Disruptor for the sequence  获取该序号对应的事件对象；</span></div><div class="line">            event.set(bb.getLong(<span class="number">0</span>));  <span class="comment">// Fill with data</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             注意，最后的 ringBuffer.publish 方法必须包含在 finally 中以确保必须得到调用；如果某个请求的 sequence 未被提交，将会堵塞后续的发布操作或者其它的 producer。</div><div class="line"></div><div class="line">             此外，Disruptor 要求 RingBuffer.publish 必须得到调用的潜台词就是，如果发生异常也一样要调用 publish ，</div><div class="line">             那么，很显然这个时候需要调用者在事件处理的实现上来判断事件携带的数据是否是正确的或者完整的，这是实现者应该要注意的事情。</div><div class="line">             */</div><div class="line">            ringBuffer.publish(sequence);<span class="comment">//发布事件；</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>测试的main方法：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.lmax.disruptor.YieldingWaitStrategy;</div><div class="line"><span class="keyword">import</span> com.lmax.disruptor.dsl.Disruptor;</div><div class="line"><span class="keyword">import</span> com.lmax.disruptor.RingBuffer;</div><div class="line"><span class="keyword">import</span> com.lmax.disruptor.dsl.ProducerType;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongEventMain</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RingBuffer&lt;LongEvent&gt; ringBuffer = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService customerExecutor = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Disruptor&lt;LongEvent&gt; disruptor = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line"></div><div class="line">        <span class="comment">// Executor that will be used to construct new threads for consumers</span></div><div class="line">        customerExecutor = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">        <span class="comment">// The factory for the event</span></div><div class="line">        LongEventFactory factory = <span class="keyword">new</span> LongEventFactory();</div><div class="line"></div><div class="line">        <span class="comment">// Specify the size of the ring buffer, must be power of 2. RingBuffer 大小，必须是 2 的 N 次方；</span></div><div class="line">        <span class="keyword">int</span> bufferSize = <span class="number">1024</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Construct the Disruptor.</span></div><div class="line"><span class="comment">//        disruptor = new Disruptor&lt;&gt;(factory, bufferSize, executor);</span></div><div class="line">        disruptor =  <span class="keyword">new</span> Disruptor&lt;&gt;(factory, bufferSize,</div><div class="line">                customerExecutor, ProducerType.MULTI,</div><div class="line">                <span class="keyword">new</span> YieldingWaitStrategy());</div><div class="line"></div><div class="line">        <span class="comment">// Connect the handler</span></div><div class="line">        disruptor.handleEventsWith(<span class="keyword">new</span> LongEventHandler(<span class="number">1</span>), <span class="keyword">new</span> LongEventHandler(<span class="number">2</span>), <span class="keyword">new</span> LongEventHandler(<span class="number">3</span>));</div><div class="line"></div><div class="line">        <span class="comment">// Start the Disruptor, starts all threads running</span></div><div class="line">        disruptor.start();</div><div class="line"></div><div class="line">        <span class="comment">// Get the ring buffer from the Disruptor to be used for publishing.</span></div><div class="line">        ringBuffer = disruptor.getRingBuffer();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span>  CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</div><div class="line">        <span class="keyword">final</span> LongEventProducer producer = <span class="keyword">new</span> LongEventProducer(ringBuffer);</div><div class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> a = <span class="number">0</span>; a &lt; <span class="number">10</span>; a ++)&#123;</div><div class="line">                executorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        ByteBuffer bb = ByteBuffer.allocate(<span class="number">8</span>);</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">long</span> l = <span class="number">0</span>; l&lt;<span class="number">100</span>; l++)</div><div class="line">                        &#123;</div><div class="line">                            bb.putLong(<span class="number">0</span>, l);</div><div class="line">                            producer.onData(bb);</div><div class="line">                        &#125;</div><div class="line">                        latch.countDown();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            latch.await();</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span>(disruptor != <span class="keyword">null</span>) disruptor.shutdown();<span class="comment">//关闭 disruptor，方法会堵塞，直至所有的事件都得到处理；</span></div><div class="line">            <span class="keyword">if</span>(customerExecutor != <span class="keyword">null</span>) customerExecutor.shutdown();<span class="comment">//关闭 disruptor 使用的线程池；如果需要的话，必须手动关闭， disruptor 在 shutdown 时不会自动关闭；</span></div><div class="line">            <span class="keyword">if</span>(executorService != <span class="keyword">null</span>) executorService.shutdown();<span class="comment">//关闭 disruptor 使用的线程池；如果需要的话，必须手动关闭， disruptor 在 shutdown 时不会自动关闭；</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h1><ul>
<li>参考文章<a href="http://blog.csdn.net/alex19881006/article/details/24468779" target="_blank" rel="external">isruptor性能测试报告</a></li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started" target="_blank" rel="external">disruptor官方文档</a></li>
<li><a href="http://ifeve.com/disruptor/" target="_blank" rel="external">并发编程网disruptor</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、什么是-Disruptor&quot;&gt;&lt;a href=&quot;#一、什么是-Disruptor&quot; class=&quot;headerlink&quot; title=&quot;一、什么是 Disruptor&quot;&gt;&lt;/a&gt;一、什么是 Disruptor&lt;/h1&gt;&lt;p&gt;从功能上来看，Disruptor 是
    
    </summary>
    
      <category term="高并发" scheme="ttp://liubenlong.github.io/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="disruptor" scheme="ttp://liubenlong.github.io/tags/disruptor/"/>
    
      <category term="高并发" scheme="ttp://liubenlong.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>akka（二）helloword（原创）</title>
    <link href="ttp://liubenlong.github.io/2016/12/08/java%E9%AB%98%E5%B9%B6%E5%8F%91/akka/akka%EF%BC%88%E4%BA%8C%EF%BC%89helloword/"/>
    <id>ttp://liubenlong.github.io/2016/12/08/java高并发/akka/akka（二）helloword/</id>
    <published>2016-12-07T16:00:00.000Z</published>
    <updated>2016-12-14T03:52:00.666Z</updated>
    
    <content type="html"><![CDATA[<p>本示例来自于官方示例（<a href="http://doc.akka.io/docs/akka/2.4.4/intro/getting-started.html）：" target="_blank" rel="external">http://doc.akka.io/docs/akka/2.4.4/intro/getting-started.html）：</a><br>文中找到 Using Akka with Maven 。点击“Akka Main in Java”下载示例。</p>
<p><a href="http://www.lightbend.com/activator/template/akka-sample-main-java" target="_blank" rel="external">http://www.lightbend.com/activator/template/akka-sample-main-java</a></p>
<p><img src="http://liubenlong.github.io/images/77d1dac8-bbf6-4cf2-95e5-7354849dd74c.png" alt=""></p>
<blockquote>
<p>注意：新版本的akka需要使用jdk8</p>
</blockquote>
<p>里面有两个Actor：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sample.hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> akka.actor.Props;</div><div class="line"><span class="keyword">import</span> akka.actor.UntypedActor;</div><div class="line"><span class="keyword">import</span> akka.actor.ActorRef;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preStart</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// create the greeter actor</span></div><div class="line">    <span class="keyword">final</span> ActorRef greeter = getContext().actorOf(Props.create(Greeter.class), <span class="string">"greeter"</span>);</div><div class="line">    <span class="comment">// tell it to perform the greeting</span></div><div class="line">    greeter.tell(Greeter.Msg.GREET, getSelf());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg == Greeter.Msg.DONE) &#123;</div><div class="line">      <span class="comment">// when the greeter is done, stop this actor and with it the application</span></div><div class="line">      getContext().stop(getSelf());</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">      unhandled(msg);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sample.hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> akka.actor.UntypedActor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">UntypedActor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Msg &#123;</div><div class="line">    GREET, DONE;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Object msg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg == Msg.GREET) &#123;</div><div class="line">      System.out.println(<span class="string">"Hello World!"</span>);</div><div class="line">      Thread.sleep(<span class="number">1000</span>);</div><div class="line">      getSender().tell(Msg.DONE, getSelf());</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">      unhandled(msg);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>main方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sample.hello;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    akka.Main.main(<span class="keyword">new</span> String[] &#123; HelloWorld.class.getName() &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另一种main写法，通过创建actor的方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    ActorSystem system = ActorSystem.create(<span class="string">"Hello"</span>);</div><div class="line">    ActorRef a = system.actorOf(Props.create(HelloWorld.class), <span class="string">"helloWorld"</span>);</div><div class="line">    System.out.println(a.path());</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>helloWord示例比较简单，不过多解释</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本示例来自于官方示例（&lt;a href=&quot;http://doc.akka.io/docs/akka/2.4.4/intro/getting-started.html）：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://doc.akka.io/do
    
    </summary>
    
      <category term="akka" scheme="ttp://liubenlong.github.io/categories/akka/"/>
    
    
      <category term="java" scheme="ttp://liubenlong.github.io/tags/java/"/>
    
      <category term="高并发" scheme="ttp://liubenlong.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="akka" scheme="ttp://liubenlong.github.io/tags/akka/"/>
    
  </entry>
  
  <entry>
    <title>akka（三）原理分析（原创）</title>
    <link href="ttp://liubenlong.github.io/2016/12/08/java%E9%AB%98%E5%B9%B6%E5%8F%91/akka/akka%EF%BC%88%E4%B8%89%EF%BC%89%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>ttp://liubenlong.github.io/2016/12/08/java高并发/akka/akka（三）原理分析/</id>
    <published>2016-12-07T16:00:00.000Z</published>
    <updated>2016-12-08T03:25:22.284Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="akka" scheme="ttp://liubenlong.github.io/categories/akka/"/>
    
    
      <category term="java" scheme="ttp://liubenlong.github.io/tags/java/"/>
    
      <category term="高并发" scheme="ttp://liubenlong.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="akka" scheme="ttp://liubenlong.github.io/tags/akka/"/>
    
  </entry>
  
  <entry>
    <title>akka（一）简介（原创）</title>
    <link href="ttp://liubenlong.github.io/2016/12/08/java%E9%AB%98%E5%B9%B6%E5%8F%91/akka/akka%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B/"/>
    <id>ttp://liubenlong.github.io/2016/12/08/java高并发/akka/akka（一）简介/</id>
    <published>2016-12-07T16:00:00.000Z</published>
    <updated>2016-12-14T03:51:54.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要用akka"><a href="#为什么要用akka" class="headerlink" title="为什么要用akka"></a>为什么要用akka</h2><p>Akka提供可扩展的实时事务处理。</p>
<p>Akka是一个运行时与编程模型一致的系统，为以下目标设计：</p>
<ul>
<li>垂直扩展（并发）</li>
<li>水平扩展（远程调用）</li>
<li>高容错</li>
</ul>
<p>在Akka的世界里，只有一个内容需要学习和管理，具有高内聚和高一致的语义。</p>
<p>Akka是一种高度可扩展的软件，这不仅仅表现在性能方面，也表现在它所适用的应用的大小。Akka的核心，Akka-actor是非常小的，可以非常方便地放进你的应用中，提供你需要的异步无锁并行功能，不会有任何困扰。</p>
<p>你可以任意选择Akka的某些部分集成到你的应用中，也可以使用完整的包——Akka 微内核，它是一个独立的容器，可以直接部署你的Akka应用。随着CPU核数越来越多，即使你只使用一台电脑，Akka也可作为一种提供卓越性能的选择。 Akka还同时提供多种并发范型，允许用户选择正确的工具来完成工作。</p>
<h2 id="使用akka带来的好处"><a href="#使用akka带来的好处" class="headerlink" title="使用akka带来的好处"></a>使用akka带来的好处</h2><ul>
<li>AKKA提供一种Actor并发模型，其粒度比线程小很多，这意味着你可以在项目中使用大量的Actor。</li>
<li>Akka提供了一套容错机制，允许在Actor出错时进行一些恢复或者重置操作</li>
<li>AKKA不仅可以在单击上构建高并发程序，也可以在网络中构建分布式程序，并提供位置透明的Actor定位服务<br><img src="http://liubenlong.github.io/images/6a766a9f-6e6e-45b4-9175-b87614a77e9a.png" alt=""></li>
</ul>
<h2 id="Actor"><a href="#Actor" class="headerlink" title="Actor"></a>Actor</h2><p>actor是akka执行的基本单元，比线程更轻量级，使用akka可以忘掉线程了。事实上，线程调度已经被akka封装。</p>
<blockquote>
<p> <a href="http://blog.csdn.net/wsscy2004/article/details/38875065" target="_blank" rel="external">actor生命周期</a></p>
</blockquote>
<p>##消息投递</p>
<ul>
<li>这个akka应用是有消息驱动的，消息是除了actor之外最重要的核心组件。在actor之前投递消息应该满足<strong>不可变性</strong>，也就是不便模式</li>
<li>消息投递有3种策略：之多一次投递，至少一次投递，精确的消息投递。BUT ，没必要在akka层面保证消息的可靠性，一般在业务层在保证</li>
<li>akka可以在一定程度上保证顺序性，但不具备传递性，见《java高并发程序设计 P295》</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Akka的模块化做得非常好，它为不同的功能提供了不同的Jar包。</p>
<ul>
<li><tt class="docutils literal">akka-actor-2.0.jar</tt> – 标准Actor, 有类型Actor，等等</li>
<li><tt class="docutils literal">akka-remote-2.0.jar</tt> – 远程Actor</li>
<li><tt class="docutils literal">akka-slf4j-2.0.jar</tt> – SLF4J事件处理监听器</li>
<li><tt class="docutils literal">akka-testkit-2.0.jar</tt> – 用于测试Actor的工具包</li>
<li><tt class="docutils literal">akka-kernel-2.0.jar</tt> – Akka微内核，可运行一个基本的最小应用服务器</li>
<li><tt class="docutils literal">akka-<storage-system>-mailbox-2.0.jar</storage-system></tt> – Akka可容错邮箱</li>
</ul>
<p>要查看每个Akka模块的jar包依赖见 <a href="http://www.gtan.com/akka_doc/dev/building-akka.html#dependencies" target="_blank" rel="external"><em>依赖</em></a> 章节. 虽然不重要不过<code>akka-actor</code> 没有外部依赖 (除了<code>scala-library.jar</code> JAR包).</p>
<h2 id="我该如何使用和部署-Akka"><a href="#我该如何使用和部署-Akka" class="headerlink" title="我该如何使用和部署 Akka?"></a>我该如何使用和部署 Akka?</h2><p>Akka 可以有几种使用方式:</p>
<ul>
<li>作为一个库: 以普通jar包的形式放在classpath上，或放到web应用中的 <code>WEB-INF/lib</code>位置</li>
<li>作为一个独立的应用程序，使用 <a href="http://www.gtan.com/akka_doc/modules/microkernel.html#microkernel" target="_blank" rel="external"><em>Microkernel（微内核）</em></a>，自己有一个main类来初始化Actor系统</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要用akka&quot;&gt;&lt;a href=&quot;#为什么要用akka&quot; class=&quot;headerlink&quot; title=&quot;为什么要用akka&quot;&gt;&lt;/a&gt;为什么要用akka&lt;/h2&gt;&lt;p&gt;Akka提供可扩展的实时事务处理。&lt;/p&gt;
&lt;p&gt;Akka是一个运行时与编程模型一致
    
    </summary>
    
      <category term="akka" scheme="ttp://liubenlong.github.io/categories/akka/"/>
    
    
      <category term="java" scheme="ttp://liubenlong.github.io/tags/java/"/>
    
      <category term="高并发" scheme="ttp://liubenlong.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="akka" scheme="ttp://liubenlong.github.io/tags/akka/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习（二）redis内存淘汰策略.md</title>
    <link href="ttp://liubenlong.github.io/2016/12/05/redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89redis%E7%BC%93%E5%AD%98%E8%B6%85%E9%A2%9D%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/"/>
    <id>ttp://liubenlong.github.io/2016/12/05/redis/Redis学习（二）redis缓存超额淘汰策略/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2016-12-08T08:12:10.429Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文讲的是 当redis设定了最大内存之后，缓存中的数据集大小超过了一定比例，实施的淘汰策略，不是删除过期键的策略，虽然两者非常相似。</p>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在 redis 中，允许用户设置最大使用内存大小<em>通过配置<code>redis.conf</code>中的<code>maxmemory</code>这个值来开启内存淘汰功能</em>，在内存限定的情况下是很有用的。<br>设置最大内存大小可以保证redis对外提供稳健服务。</p>
<p>redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略<em>通过<code>maxmemory-policy</code>设置策略</em>：</p>
<ol>
<li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>
<li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>
<li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>
<li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li>
<li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li>
<li>no-enviction（驱逐）：禁止驱逐数据</li>
</ol>
<p>redis 确定驱逐某个键值对后，会删除这个数据并将这个数据变更消息发布到本地（AOF 持久化）和从机（主从连接）</p>
<h2 id="LRU-数据淘汰机制"><a href="#LRU-数据淘汰机制" class="headerlink" title="LRU 数据淘汰机制"></a>LRU 数据淘汰机制</h2><p>在服务器配置中保存了 lru 计数器 server.lrulock，会定时（redis 定时程序 serverCorn()）更新，server.lrulock 的值是根据 server.unixtime 计算出来的。</p>
<p>另外，从 struct redisObject 中可以发现，每一个 redis 对象都会设置相应的 lru。可以想象的是，每一次访问数据的时候，会更新 redisObject.lru。</p>
<p><strong>LRU 数据淘汰机制是这样的</strong>：在数据集中随机挑选几个键值对，取出其中 lru 最大的键值对淘汰。所以，你会发现，<strong>redis 并不是保证取得所有数据集中最近最少使用（LRU）的键值对，而只是随机挑选的几个键值对中的。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// redisServer 保存了 lru 计数器</span></div><div class="line"><span class="keyword">struct</span> redisServer &#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">unsigned</span> lruclock:<span class="number">22</span>;       <span class="comment">/* Clock incrementing every minute, for LRU */</span></div><div class="line">    ...</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 每一个 redis 对象都保存了 lru</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_LRU_CLOCK_MAX ((1<span class="meta-string">&lt;&lt;21)-1) /* Max value of obj-&gt;</span>lru */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REDIS_LRU_CLOCK_RESOLUTION 10 <span class="comment">/* LRU clock resolution in seconds */</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> redisObject &#123;</div><div class="line">    <span class="comment">// 刚刚好 32 bits</span></div><div class="line"></div><div class="line">    <span class="comment">// 对象的类型，字符串/列表/集合/哈希表</span></div><div class="line">    <span class="keyword">unsigned</span> type:<span class="number">4</span>;</div><div class="line">    <span class="comment">// 未使用的两个位</span></div><div class="line">    <span class="keyword">unsigned</span> notused:<span class="number">2</span>;     <span class="comment">/* Not used */</span></div><div class="line">    <span class="comment">// 编码的方式，redis 为了节省空间，提供多种方式来保存一个数据</span></div><div class="line">    <span class="comment">// 譬如：“123456789” 会被存储为整数 123456789</span></div><div class="line">    <span class="keyword">unsigned</span> encoding:<span class="number">4</span>;</div><div class="line">    <span class="keyword">unsigned</span> lru:<span class="number">22</span>;        <span class="comment">/* lru time (relative to server.lruclock) */</span></div><div class="line"></div><div class="line">    <span class="comment">// 引用数</span></div><div class="line">    <span class="keyword">int</span> refcount;</div><div class="line"></div><div class="line">    <span class="comment">// 数据指针</span></div><div class="line">    <span class="keyword">void</span> *ptr;</div><div class="line">&#125; robj;</div><div class="line"></div><div class="line"><span class="comment">// redis 定时执行程序。联想：linux cron</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">serverCron</span><span class="params">(<span class="keyword">struct</span> aeEventLoop *eventLoop, <span class="keyword">long</span> <span class="keyword">long</span> id, <span class="keyword">void</span> *clientData)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="comment">/* We have just 22 bits per object for LRU information.</span></div><div class="line">     * So we use an (eventually wrapping) LRU clock with 10 seconds resolution.</div><div class="line">     * 2^22 bits with 10 seconds resolution is more or less 1.5 years.</div><div class="line">     *</div><div class="line">     * Note that even if this will wrap after 1.5 years it's not a problem,</div><div class="line">     * everything will still work but just some object will appear younger</div><div class="line">     * to Redis. But for this to happen a given object should never be touched</div><div class="line">     * for 1.5 years.</div><div class="line">     *</div><div class="line">     * Note that you can change the resolution altering the</div><div class="line">     * REDIS_LRU_CLOCK_RESOLUTION define.</div><div class="line">     */</div><div class="line">    updateLRUClock();</div><div class="line">    ......</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 更新服务器的 lru 计数器</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateLRUClock</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    server.lruclock = (server.unixtime/REDIS_LRU_CLOCK_RESOLUTION) &amp;</div><div class="line">                                                REDIS_LRU_CLOCK_MAX;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="TTL-数据淘汰机制"><a href="#TTL-数据淘汰机制" class="headerlink" title="TTL 数据淘汰机制"></a>TTL 数据淘汰机制</h2><p>redis 数据集数据结构中保存了键值对过期时间的表，即 redisDb.expires。和 LRU 数据淘汰机制类似，TTL 数据淘汰机制是这样的：从过期时间的表中随机挑选几个键值对，取出其中 ttl 最大的键值对淘汰。同样你会发现，<strong>redis 并不是保证取得所有过期时间的表中最快过期的键值对，而只是随机挑选的几个键值对中的。</strong></p>
<p><strong>总结</strong></p>
<p>redis 每服务客户端执行一个命令的时候，会检测使用的内存是否超额。如果超额，即进行数据淘汰。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 执行命令</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">processCommand</span><span class="params">(redisClient *c)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    <span class="comment">// 内存超额</span></div><div class="line">    <span class="comment">/* Handle the maxmemory directive.</span></div><div class="line">     *</div><div class="line">     * First we try to free some memory if possible (if there are volatile</div><div class="line">     * keys in the dataset). If there are not the only thing we can do</div><div class="line">     * is returning an error. */</div><div class="line">    <span class="keyword">if</span> (server.maxmemory) &#123;</div><div class="line">        <span class="keyword">int</span> retval = freeMemoryIfNeeded();</div><div class="line">        <span class="keyword">if</span> ((c-&gt;cmd-&gt;flags &amp; REDIS_CMD_DENYOOM) &amp;&amp; retval == REDIS_ERR) &#123;</div><div class="line">            flagTransaction(c);</div><div class="line">            addReply(c, shared.oomerr);</div><div class="line">            <span class="keyword">return</span> REDIS_OK;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 如果需要，是否一些内存</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">freeMemoryIfNeeded</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">size_t</span> mem_used, mem_tofree, mem_freed;</div><div class="line">    <span class="keyword">int</span> slaves = listLength(server.slaves);</div><div class="line"></div><div class="line">    <span class="comment">// redis 从机回复空间和 AOF 内存大小不计算入 redis 内存大小</span></div><div class="line">    <span class="comment">/* Remove the size of slaves output buffers and AOF buffer from the</span></div><div class="line">     * count of used memory. */</div><div class="line">    mem_used = zmalloc_used_memory();</div><div class="line"></div><div class="line">    <span class="comment">// 从机回复空间大小</span></div><div class="line">    <span class="keyword">if</span> (slaves) &#123;</div><div class="line">        listIter li;</div><div class="line">        listNode *ln;</div><div class="line"></div><div class="line">        listRewind(server.slaves,&amp;li);</div><div class="line">        <span class="keyword">while</span>((ln = listNext(&amp;li))) &#123;</div><div class="line">            redisClient *slave = listNodeValue(ln);</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> obuf_bytes = getClientOutputBufferMemoryUsage(slave);</div><div class="line">            <span class="keyword">if</span> (obuf_bytes &gt; mem_used)</div><div class="line">                mem_used = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                mem_used -= obuf_bytes;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// server.aof_buf &amp;&amp; server.aof_rewrite_buf_blocks</span></div><div class="line">    <span class="keyword">if</span> (server.aof_state != REDIS_AOF_OFF) &#123;</div><div class="line">        mem_used -= sdslen(server.aof_buf);</div><div class="line">        mem_used -= aofRewriteBufferSize();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 内存是否超过设置大小</span></div><div class="line">    <span class="comment">/* Check if we are over the memory limit. */</span></div><div class="line">    <span class="keyword">if</span> (mem_used &lt;= server.maxmemory) <span class="keyword">return</span> REDIS_OK;</div><div class="line"></div><div class="line">    <span class="comment">// redis 中可以设置内存超额策略</span></div><div class="line">    <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_NO_EVICTION)</div><div class="line">        <span class="keyword">return</span> REDIS_ERR; <span class="comment">/* We need to free memory, but policy forbids. */</span></div><div class="line"></div><div class="line">    <span class="comment">/* Compute how much memory we need to free. */</span></div><div class="line">    mem_tofree = mem_used - server.maxmemory;</div><div class="line">    mem_freed = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (mem_freed &lt; mem_tofree) &#123;</div><div class="line">        <span class="keyword">int</span> j, k, keys_freed = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 遍历所有数据集</span></div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server.dbnum; j++) &#123;</div><div class="line">            <span class="keyword">long</span> bestval = <span class="number">0</span>; <span class="comment">/* just to prevent warning */</span></div><div class="line">            sds bestkey = <span class="literal">NULL</span>;</div><div class="line">            <span class="keyword">struct</span> dictEntry *de;</div><div class="line">            redisDb *db = server.db+j;</div><div class="line">            dict *dict;</div><div class="line"></div><div class="line">            <span class="comment">// 不同的策略，选择的数据集不一样</span></div><div class="line">            <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_LRU ||</div><div class="line">                server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_RANDOM)</div><div class="line">            &#123;</div><div class="line">                dict = server.db[j].dict;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                dict = server.db[j].expires;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 数据集为空，继续下一个数据集</span></div><div class="line">            <span class="keyword">if</span> (dictSize(dict) == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 随机淘汰随机策略：随机挑选</span></div><div class="line">            <span class="comment">/* volatile-random and allkeys-random policy */</span></div><div class="line">            <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_RANDOM ||</div><div class="line">                server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_RANDOM)</div><div class="line">            &#123;</div><div class="line">                de = dictGetRandomKey(dict);</div><div class="line">                bestkey = dictGetKey(de);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// LRU 策略：挑选最近最少使用的数据</span></div><div class="line">            <span class="comment">/* volatile-lru and allkeys-lru policy */</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_LRU ||</div><div class="line">                server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_LRU)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// server.maxmemory_samples 为随机挑选键值对次数</span></div><div class="line">                <span class="comment">// 随机挑选 server.maxmemory_samples个键值对，驱逐最近最少使用的数据</span></div><div class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; server.maxmemory_samples; k++) &#123;</div><div class="line">                    sds thiskey;</div><div class="line">                    <span class="keyword">long</span> thisval;</div><div class="line">                    robj *o;</div><div class="line"></div><div class="line">                    <span class="comment">// 随机挑选键值对</span></div><div class="line">                    de = dictGetRandomKey(dict);</div><div class="line"></div><div class="line">                    <span class="comment">// 获取键</span></div><div class="line">                    thiskey = dictGetKey(de);</div><div class="line"></div><div class="line">                    <span class="comment">/* When policy is volatile-lru we need an additional lookup</span></div><div class="line">                     * to locate the real key, as dict is set to db-&gt;expires. */</div><div class="line">                    <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_LRU)</div><div class="line">                        de = dictFind(db-&gt;dict, thiskey);</div><div class="line">                    o = dictGetVal(de);</div><div class="line"></div><div class="line">                    <span class="comment">// 计算数据的空闲时间</span></div><div class="line">                    thisval = estimateObjectIdleTime(o);</div><div class="line"></div><div class="line">                    <span class="comment">// 当前键值空闲时间更长，则记录</span></div><div class="line">                    <span class="comment">/* Higher idle time is better candidate for deletion */</span></div><div class="line">                    <span class="keyword">if</span> (bestkey == <span class="literal">NULL</span> || thisval &gt; bestval) &#123;</div><div class="line">                        bestkey = thiskey;</div><div class="line">                        bestval = thisval;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// TTL 策略：挑选将要过期的数据</span></div><div class="line">            <span class="comment">/* volatile-ttl */</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_TTL) &#123;</div><div class="line">                <span class="comment">// server.maxmemory_samples 为随机挑选键值对次数</span></div><div class="line">                <span class="comment">// 随机挑选 server.maxmemory_samples个键值对，驱逐最快要过期的数据</span></div><div class="line">                <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; server.maxmemory_samples; k++) &#123;</div><div class="line">                    sds thiskey;</div><div class="line">                    <span class="keyword">long</span> thisval;</div><div class="line"></div><div class="line">                    de = dictGetRandomKey(dict);</div><div class="line">                    thiskey = dictGetKey(de);</div><div class="line">                    thisval = (<span class="keyword">long</span>) dictGetVal(de);</div><div class="line"></div><div class="line">                    <span class="comment">/* Expire sooner (minor expire unix timestamp) is better</span></div><div class="line">                     * candidate for deletion */</div><div class="line">                    <span class="keyword">if</span> (bestkey == <span class="literal">NULL</span> || thisval &lt; bestval) &#123;</div><div class="line">                        bestkey = thiskey;</div><div class="line">                        bestval = thisval;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 删除选定的键值对</span></div><div class="line">            <span class="comment">/* Finally remove the selected key. */</span></div><div class="line">            <span class="keyword">if</span> (bestkey) &#123;</div><div class="line">                <span class="keyword">long</span> <span class="keyword">long</span> delta;</div><div class="line"></div><div class="line">                robj *keyobj = createStringObject(bestkey,sdslen(bestkey));</div><div class="line"></div><div class="line">                <span class="comment">// 发布数据更新消息，主要是 AOF 持久化和从机</span></div><div class="line">                propagateExpire(db,keyobj);</div><div class="line"></div><div class="line">                <span class="comment">// 注意， propagateExpire() 可能会导致内存的分配， propagateExpire() </span></div><div class="line">提前执行就是因为 redis 只计算 dbDelete() 释放的内存大小。倘若同时计算 dbDelete() 释放的内存</div><div class="line">和 propagateExpire() 分配空间的大小，与此同时假设分配空间大于释放空间，就有可能永远退不出这个循环。</div><div class="line">                <span class="comment">// 下面的代码会同时计算 dbDelete() 释放的内存和 propagateExpire() 分配空间的大小：</span></div><div class="line">                <span class="comment">// propagateExpire(db,keyobj);</span></div><div class="line">                <span class="comment">// delta = (long long) zmalloc_used_memory();</span></div><div class="line">                <span class="comment">// dbDelete(db,keyobj);</span></div><div class="line">                <span class="comment">// delta -= (long long) zmalloc_used_memory();</span></div><div class="line">                <span class="comment">// mem_freed += delta;</span></div><div class="line">                <span class="comment">/////////////////////////////////////////</span></div><div class="line"></div><div class="line">                <span class="comment">/* We compute the amount of memory freed by dbDelete() alone.</span></div><div class="line">                 * It is possible that actually the memory needed to propagate</div><div class="line">                 * the DEL in AOF and replication link is greater than the one</div><div class="line">                 * we are freeing removing the key, but we can't account for</div><div class="line">                 * that otherwise we would never exit the loop.</div><div class="line">                 *</div><div class="line">                 * AOF and Output buffer memory will be freed eventually so</div><div class="line">                 * we only care about memory used by the key space. */</div><div class="line">                <span class="comment">// 只计算 dbDelete() 释放内存的大小</span></div><div class="line">                delta = (<span class="keyword">long</span> <span class="keyword">long</span>) zmalloc_used_memory();</div><div class="line">                dbDelete(db,keyobj);</div><div class="line">                delta -= (<span class="keyword">long</span> <span class="keyword">long</span>) zmalloc_used_memory();</div><div class="line">                mem_freed += delta;</div><div class="line"></div><div class="line">                server.stat_evictedkeys++;</div><div class="line"></div><div class="line">                <span class="comment">// 将数据的删除通知所有的订阅客户端</span></div><div class="line">                notifyKeyspaceEvent(REDIS_NOTIFY_EVICTED, <span class="string">"evicted"</span>,</div><div class="line">                    keyobj, db-&gt;id);</div><div class="line">                decrRefCount(keyobj);</div><div class="line">                keys_freed++;</div><div class="line"></div><div class="line">                <span class="comment">// 将从机回复空间中的数据及时发送给从机</span></div><div class="line">                <span class="comment">/* When the memory to free starts to be big enough, we may</span></div><div class="line">                 * start spending so much time here that is impossible to</div><div class="line">                 * deliver data to the slaves fast enough, so we force the</div><div class="line">                 * transmission here inside the loop. */</div><div class="line">                <span class="keyword">if</span> (slaves) flushSlavesOutputBuffers();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 未能释放空间，且此时 redis 使用的内存大小依旧超额，失败返回</span></div><div class="line">        <span class="keyword">if</span> (!keys_freed) <span class="keyword">return</span> REDIS_ERR; <span class="comment">/* nothing to free... */</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> REDIS_OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>下面看看几种策略的适用场景：</p>
<ul>
<li>allkeys-lru： 如果我们的应用对缓存的访问符合幂律分布（也就是存在相对热点数据），或者我们不太清楚我们应用的缓存访问分布状况，我们可以选择allkeys-lru策略。</li>
<li>allkeys-random： 如果我们的应用对于缓存key的访问概率相等，则可以使用这个策略。</li>
<li>volatile-ttl： 这种策略使得我们可以向Redis提示哪些key更适合被eviction。</li>
</ul>
<p>另外，volatile-lru策略和volatile-random策略适合我们将一个Redis实例既应用于缓存和又应用于持久化存储的时候，然而我们也可以通过使用两个Redis实例来达到相同的效果，值得一提的是将key设置过期时间实际上会消耗更多的内存，因此我们建议使用allkeys-lru策略从而更有效率的使用内存。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文讲的是 当redis设定了最大内存之后，缓存中的数据集大小超过了一定比例，实施的淘汰策略，不是删除过期键的策略，虽然两者非常相似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;heade
    
    </summary>
    
      <category term="redis" scheme="ttp://liubenlong.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="ttp://liubenlong.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习（一）redis3.2.5集群搭建.md</title>
    <link href="ttp://liubenlong.github.io/2016/12/05/redis/Redis%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89redis3.2.5%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>ttp://liubenlong.github.io/2016/12/05/redis/Redis学习（一）redis3.2.5集群搭建/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2016-12-07T06:39:58.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载和解包"><a href="#下载和解包" class="headerlink" title="下载和解包"></a>下载和解包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/software</div><div class="line">wget http://download.redis.io/releases/redis-3.2.6.tar.gz</div><div class="line">tar -zxvf /redis-3.2.6.tar.gz</div></pre></td></tr></table></figure>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd redis-3.2.6</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h2 id="创建redis节点"><a href="#创建redis节点" class="headerlink" title="创建redis节点"></a>创建redis节点</h2><blockquote>
<p>测试我们选择2台服务器，分别为：192.168.215.129，192.168.215.130.每分服务器有3个节点。</p>
</blockquote>
<ul>
<li>我先在192.168.215.129创建3个节点：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cd /usr/software</div><div class="line">mkdir redis_cluster //创建集群目录</div><div class="line">cd redis_cluster</div><div class="line">mkdir 7000 7001 7002  //分别代表三个节点    其对应端口 7000 7001 7002</div><div class="line">cd ..</div><div class="line"> //创建7000节点为例，拷贝到7000目录</div><div class="line"> cp /usr/software/redis-3.2.6/redis.conf  ./redis_cluster/7000/</div><div class="line"> //拷贝到7001目录</div><div class="line"> cp /usr/software/redis-3.2.6/redis.conf  ./redis_cluster/7001/</div><div class="line"> //拷贝到7002目录</div><div class="line"> cp /usr/software/redis-3.2.6/redis.conf  ./redis_cluster/7002/</div></pre></td></tr></table></figure>
<p>   分别对7000，7001、7002文件夹中的3个文件修改对应的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">daemonize    yes                          //redis后台运行</div><div class="line">pidfile  /var/run/redis_7000.pid          //pidfile文件对应7000,7001,7002</div><div class="line">port  7000                                //端口7000,7002,7003</div><div class="line">cluster-enabled  yes                      //开启集群  把注释#去掉</div><div class="line">cluster-config-file  nodes_7000.conf      //集群的配置  配置文件首次启动自动生成 7000,7001,7002</div><div class="line">bind 192.168.215.130                      //这里要绑定机器的IP</div><div class="line">cluster-node-timeout  5000                //请求超时  设置5秒够了</div><div class="line">appendonly  yes                           //aof日志开启  有需要就开启，它会每次写操作都记录一条日志&lt;/pre&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>在192.168.1.238创建3个节点：对应的端口改为7003,7004,7005.配置对应的改一下就可以了。</p>
<p> 4、两台机启动各节点(两台服务器方式一样)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd /usr/software</div><div class="line">redis-server  redis_cluster/7000/redis.conf</div><div class="line">redis-server  redis_cluster/7001/redis.conf</div><div class="line">redis-server  redis_cluster/7002/redis.conf</div><div class="line">redis-server  redis_cluster/7003/redis.conf</div><div class="line">redis-server  redis_cluster/7004/redis.conf</div><div class="line">redis-server  redis_cluster/7005/redis.conf</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep redis   #查看是否启动成功</div><div class="line">netstat -tnlp | grep redis #可以看到redis监听端口</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@zk1 software]# ps -ef | grep redis</div><div class="line">root      10601      1  0 06:42 ?        00:00:00 redis-server 192.168.215.129:7000 [cluster]</div><div class="line">root      10606      1  0 06:42 ?        00:00:00 redis-server 192.168.215.129:7001 [cluster]</div><div class="line">root      10610      1  0 06:42 ?        00:00:00 redis-server 192.168.215.129:7002 [cluster]</div><div class="line">root      10615   4548  0 06:42 pts/2    00:00:00 grep --color=auto redis</div><div class="line">[root@zk1 software]# </div><div class="line">[root@zk1 software]# </div><div class="line">[root@zk1 software]# </div><div class="line">[root@zk1 software]# netstat -tnlp | grep redis</div><div class="line">tcp        0      0 192.168.215.129:17002   0.0.0.0:*               LISTEN      10610/redis-server  </div><div class="line">tcp        0      0 192.168.215.129:7000    0.0.0.0:*               LISTEN      10601/redis-server  </div><div class="line">tcp        0      0 192.168.215.129:7001    0.0.0.0:*               LISTEN      10606/redis-server  </div><div class="line">tcp        0      0 192.168.215.129:7002    0.0.0.0:*               LISTEN      10610/redis-server  </div><div class="line">tcp        0      0 192.168.215.129:17000   0.0.0.0:*               LISTEN      10601/redis-server  </div><div class="line">tcp        0      0 192.168.215.129:17001   0.0.0.0:*               LISTEN      10606/redis-server</div></pre></td></tr></table></figure>
<h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><p>前面已经准备好了搭建集群的redis节点，接下来我们要把这些节点都串连起来搭建集群。官方提供了一个工具：redis-trib.rb(/usr/local/redis-3.2.1/src/redis-trib.rb) 看后缀就知道这鸟东西不能直接执行，它是用ruby写的一个程序，所以我们还得安装ruby.再用 gem 这个命令来安装 redis接口, gem是ruby的一个工具包.<br>为了方便，两台机器都安装.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y install ruby ruby-devel rubygems rpm-build</div><div class="line">gem install redis</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：这里需要修改gem源，并且淘宝的gem源已经不能用了，坑爹啊，现在要使用ruby-china。<br><a href="https://gems.ruby-china.org/" target="_blank" rel="external">https://gems.ruby-china.org/</a></p>
</blockquote>
<p>添加ruby-china源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@zk1 software]# gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</div><div class="line">[root@zk1 software]# gem sources -l</div><div class="line">*** CURRENT SOURCES ***</div><div class="line"></div><div class="line">https://gems.ruby-china.org/</div></pre></td></tr></table></figure></p>
<ul>
<li>redis-trib.rb<br>进入<code>/usr/software/redis-3.2.5/src</code>运行一下<code>redis-trib.rb</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[root@zk2 src]# ./redis-trib.rb</div><div class="line">Usage: redis-trib &lt;command&gt; &lt;options&gt; &lt;arguments ...&gt;</div><div class="line"></div><div class="line">  create          host1:port1 ... hostN:portN</div><div class="line">                  --replicas &lt;arg&gt;</div><div class="line">  check           host:port</div><div class="line">  info            host:port</div><div class="line">  fix             host:port</div><div class="line">                  --timeout &lt;arg&gt;</div><div class="line">  reshard         host:port</div><div class="line">                  --from &lt;arg&gt;</div><div class="line">                  --to &lt;arg&gt;</div><div class="line">                  --slots &lt;arg&gt;</div><div class="line">                  --yes</div><div class="line">                  --timeout &lt;arg&gt;</div><div class="line">                  --pipeline &lt;arg&gt;</div><div class="line">  rebalance       host:port</div><div class="line">                  --weight &lt;arg&gt;</div><div class="line">                  --auto-weights</div><div class="line">                  --use-empty-masters</div><div class="line">                  --timeout &lt;arg&gt;</div><div class="line">                  --simulate</div><div class="line">                  --pipeline &lt;arg&gt;</div><div class="line">                  --threshold &lt;arg&gt;</div><div class="line">  add-node        new_host:new_port existing_host:existing_port</div><div class="line">                  --slave</div><div class="line">                  --master-id &lt;arg&gt;</div><div class="line">  del-node        host:port node_id</div><div class="line">  set-timeout     host:port milliseconds</div><div class="line">  call            host:port command arg arg .. arg</div><div class="line">  import          host:port</div><div class="line">                  --from &lt;arg&gt;</div><div class="line">                  --copy</div><div class="line">                  --replace</div><div class="line">  help            (show this help)</div><div class="line"></div><div class="line">For check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>看到这，应该明白了吧， 就是靠上面这些操作 完成redis集群搭建的.</p>
<p> 确认所有的节点都启动，接下来使用参数create 创建 (在192.168.215.129中来创建)<em>注意要关闭防火墙</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">[root@zk1 src]# ./redis-trib.rb  create  --replicas  1  192.168.215.129:7000 192.168.215.129:7001  192.168.215.129:7002 192.168.215.130:7003  192.168.215.130:7004  192.168.215.130:7005</div><div class="line">&gt;&gt;&gt; Creating cluster</div><div class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</div><div class="line">Using 3 masters:</div><div class="line">192.168.215.129:7000</div><div class="line">192.168.215.130:7003</div><div class="line">192.168.215.129:7001</div><div class="line">Adding replica 192.168.215.130:7004 to 192.168.215.129:7000</div><div class="line">Adding replica 192.168.215.129:7002 to 192.168.215.130:7003</div><div class="line">Adding replica 192.168.215.130:7005 to 192.168.215.129:7001</div><div class="line">M: 16518afbfcbd961aeb76ef1592007a3e7fe24b1b 192.168.215.129:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">M: 524219969118a57ceaac753ecef7585f634cdf26 192.168.215.129:7001</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">S: ea4519ff0083a13cef8262490ee9e61e5a4b14b1 192.168.215.129:7002</div><div class="line">   replicates 82c0e591b9bc7a289026dff2873a254d1c49d285</div><div class="line">M: 82c0e591b9bc7a289026dff2873a254d1c49d285 192.168.215.130:7003</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">S: baf74dd89c0605d2a71a8d1d3706005ff668563b 192.168.215.130:7004</div><div class="line">   replicates 16518afbfcbd961aeb76ef1592007a3e7fe24b1b</div><div class="line">S: f8192314d2232e12ba9f558e9ecbfcc890f4fb73 192.168.215.130:7005</div><div class="line">   replicates 524219969118a57ceaac753ecef7585f634cdf26</div><div class="line">Can I set the above configuration? (type &apos;yes&apos; to accept): yes</div><div class="line">&gt;&gt;&gt; Nodes configuration updated</div><div class="line">&gt;&gt;&gt; Assign a different config epoch to each node</div><div class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</div><div class="line">Waiting for the cluster to join.....</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.215.129:7000)</div><div class="line">M: 16518afbfcbd961aeb76ef1592007a3e7fe24b1b 192.168.215.129:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: ea4519ff0083a13cef8262490ee9e61e5a4b14b1 192.168.215.129:7002</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 82c0e591b9bc7a289026dff2873a254d1c49d285</div><div class="line">S: f8192314d2232e12ba9f558e9ecbfcc890f4fb73 192.168.215.130:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 524219969118a57ceaac753ecef7585f634cdf26</div><div class="line">S: baf74dd89c0605d2a71a8d1d3706005ff668563b 192.168.215.130:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 16518afbfcbd961aeb76ef1592007a3e7fe24b1b</div><div class="line">M: 524219969118a57ceaac753ecef7585f634cdf26 192.168.215.129:7001</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: 82c0e591b9bc7a289026dff2873a254d1c49d285 192.168.215.130:7003</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure></p>
<blockquote>
<p>解释下， –replicas  1  表示 自动为每一个master节点分配一个slave节点    上面有6个节点，程序会按照一定规则生成 3个master（主）3个slave(从)<br>前面已经提醒过的 防火墙一定要开放监听的端口，否则会创建失败。</p>
</blockquote>
<p>检查集群状态:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@zk1 src]# ./redis-trib.rb check 192.168.215.129:7002</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.215.129:7002)</div><div class="line">S: ea4519ff0083a13cef8262490ee9e61e5a4b14b1 192.168.215.129:7002</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 82c0e591b9bc7a289026dff2873a254d1c49d285</div><div class="line">M: 82c0e591b9bc7a289026dff2873a254d1c49d285 192.168.215.130:7003</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: baf74dd89c0605d2a71a8d1d3706005ff668563b 192.168.215.130:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 16518afbfcbd961aeb76ef1592007a3e7fe24b1b</div><div class="line">M: 524219969118a57ceaac753ecef7585f634cdf26 192.168.215.129:7001</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: 16518afbfcbd961aeb76ef1592007a3e7fe24b1b 192.168.215.129:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: f8192314d2232e12ba9f558e9ecbfcc890f4fb73 192.168.215.130:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 524219969118a57ceaac753ecef7585f634cdf26</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure></p>
<blockquote>
<p>redis集群中数据分片是通过hash slot的方式实现的</p>
</blockquote>
<h2 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h2><ul>
<li>链接服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@zk1 src]# ./redis-cli -c -p 7000 -h 192.168.215.129</div><div class="line">192.168.215.129:7000&gt;</div><div class="line">192.168.215.129:7000&gt; cluster info</div><div class="line">cluster_state:ok</div><div class="line">cluster_slots_assigned:16384</div><div class="line">cluster_slots_ok:16384</div><div class="line">cluster_slots_pfail:0</div><div class="line">cluster_slots_fail:0</div><div class="line">cluster_known_nodes:6</div><div class="line">cluster_size:3</div><div class="line">cluster_current_epoch:6</div><div class="line">cluster_my_epoch:1</div><div class="line">cluster_stats_messages_sent:1502</div><div class="line">cluster_stats_messages_received:1502</div></pre></td></tr></table></figure>
<ul>
<li>set值<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">192.168.215.129:7000&gt; set name lbl</div><div class="line">-&gt; Redirected to slot [5798] located at 192.168.215.130:7003</div><div class="line">OK</div><div class="line">192.168.215.130:7003&gt; get name</div><div class="line">&quot;lbl&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可见，重定向到了130节点7003端口。<br>原因是redis采用hash槽的方式分发key到不同节点，算法是crc(16)%16384。详细描述后续会单独写文章描述。<br><strong>而且你会发现，当一次重定向以后，这个客户端就连接到了130:7003这个节点。</strong></p>
<h2 id="测试其中一个master宕机"><a href="#测试其中一个master宕机" class="headerlink" title="测试其中一个master宕机"></a>测试其中一个master宕机</h2><blockquote>
<p>将上面设置的<code>name</code>所在的<code>130:7003</code>kill掉，只剩了两个master和3个slave。你会发现<code>cluster_current_epoch</code>相比之前加了1，这是因为redis的主从关系，重新选了一次主。<br>然后<code>get name</code>发现，重定向了<code>129:7002</code>这个节点。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[root@zk1 src]# ./redis-trib.rb check 192.168.215.129:7002</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.215.129:7002)</div><div class="line">M: ea4519ff0083a13cef8262490ee9e61e5a4b14b1 192.168.215.129:7002</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   0 additional replica(s)</div><div class="line">S: baf74dd89c0605d2a71a8d1d3706005ff668563b 192.168.215.130:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 16518afbfcbd961aeb76ef1592007a3e7fe24b1b</div><div class="line">M: 524219969118a57ceaac753ecef7585f634cdf26 192.168.215.129:7001</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: 16518afbfcbd961aeb76ef1592007a3e7fe24b1b 192.168.215.129:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: f8192314d2232e12ba9f558e9ecbfcc890f4fb73 192.168.215.130:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 524219969118a57ceaac753ecef7585f634cdf26</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line"></div><div class="line">[root@zk1 src]# ./redis-cli -c -p 7000 -h 192.168.215.129</div><div class="line">192.168.215.129:7000&gt; cluster info</div><div class="line">cluster_state:ok</div><div class="line">cluster_slots_assigned:16384</div><div class="line">cluster_slots_ok:16384</div><div class="line">cluster_slots_pfail:0</div><div class="line">cluster_slots_fail:0</div><div class="line">cluster_known_nodes:6</div><div class="line">cluster_size:3</div><div class="line">cluster_current_epoch:7</div><div class="line">cluster_my_epoch:1</div><div class="line">cluster_stats_messages_sent:2883</div><div class="line">cluster_stats_messages_received:2675</div><div class="line">192.168.215.129:7000&gt; get name</div><div class="line">-&gt; Redirected to slot [5798] located at 192.168.215.129:7002</div><div class="line">&quot;lbl&quot;</div></pre></td></tr></table></figure>
<p>之所以会重定向到<code>129:7002</code>这个节点，是因为在kill之前<code>129:7002</code>是<code>130:7003</code>的slave：<br><em>下面这是在kill之前拷贝的<code>./redis-trib.rb check</code>的数据，注意<code>replicates</code>后的值</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.  `S: ea4519ff0083a13cef8262490ee9e61e5a4b14b1 192.168.215.129:7002`</div><div class="line">2.  `replicates 82c0e591b9bc7a289026dff2873a254d1c49d285`</div><div class="line">3.  `M:  82c0e591b9bc7a289026dff2873a254d1c49d285  192.168.215.130:7003`</div><div class="line">4.  `slots:5461-10922  (5462 slots) master`</div></pre></td></tr></table></figure></p>
<p>好了，今天就到这里，redis具体实现原理后续再讲。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载和解包&quot;&gt;&lt;a href=&quot;#下载和解包&quot; class=&quot;headerlink&quot; title=&quot;下载和解包&quot;&gt;&lt;/a&gt;下载和解包&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
    
    </summary>
    
      <category term="redis" scheme="ttp://liubenlong.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="ttp://liubenlong.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>ELK 之 nginx日志分析（原创）</title>
    <link href="ttp://liubenlong.github.io/2016/11/29/ELK/ELK%20%E4%B9%8B%20nginx%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    <id>ttp://liubenlong.github.io/2016/11/29/ELK/ELK 之 nginx日志分析/</id>
    <published>2016-11-28T16:00:00.000Z</published>
    <updated>2016-11-29T03:28:41.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>由于公司没有日志收集系统，所以之前搭建了一个ELK日志收集分析系统，如此一来查询日志就方便了很多，再加上ELK的一些方便实用的索引分析功能，可以将数据已图表形式展现，一目了然。</p>
<p>网上好多都是采用了ELK+redis的架构，但考虑到目前公司业务不是很多，所以没有加入redis一层</p>
<p><img src="http://i.imgur.com/EkD3F9G.png" alt=""></p>
<blockquote>
<p>ELK的安装请参考我上一篇文章 <a href="http://liubenlong.github.io/2016/11/24/ELK-ELK%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">ELK环境搭建</a></p>
</blockquote>
<h1 id="日志收集配置"><a href="#日志收集配置" class="headerlink" title="日志收集配置"></a>日志收集配置</h1><p>其实你的ELK系统搭建完成以后，剩下的主要就是logstash收集配置的编写以及整个系统的性能调优了，性能调优后续在写。<br>这里会逐步说明配置的一些含义，后面会将完整配置贴出。</p>
<p>nginx日志是自定义的格式，所以需要用logstash将message格式化存储到ES中，这里采用grok过滤器，使用match正则表达式解析，根据自己的log_format定制。</p>
<ol>
<li>nginx日志</li>
</ol>
<ul>
<li><strong>nginx中log_format的配置</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log_format  main  &apos;$remote_addr | $time_local | $request | $uri | &apos;</div><div class="line">                      &apos;$status | $body_bytes_sent | $bytes_sent | $gzip_ratio | $http_referer | &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; | $http_x_forwarded_for | $upstream_addr | $upstream_response_time | $upstream_status | $request_time&apos;;</div></pre></td></tr></table></figure>
<ul>
<li><strong>输出的日志</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IP地址 | 29/Nov/2016:10:25:16 +0800 | POST /api HTTP/1.1 | /api | 200 | 108 | 326 | - | - | &quot;UGCLehiGphoneClient/2.9.0 Mozilla/5.0 (Linux; Android 5.0.2; X800 Build/BBXCNOP5500710201S) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile Safari/537.36&quot; | - | IP地址:端口号 | 0.058 | 200 | 0.058</div></pre></td></tr></table></figure>
<ol>
<li>编写正则表达式</li>
</ol>
<blockquote>
<p>这里可以借助<a href="https://grokdebug.herokuapp.com/" target="_blank" rel="external">grop官网的debugger</a>和<a href="https://grokdebug.herokuapp.com/patterns#" target="_blank" rel="external">patterns</a>来快速帮助我们写正则表达式</p>
</blockquote>
<p>对应上面输出的日志，我写的正则表达式如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%&#123;IPORHOST:clientip&#125; \| %&#123;HTTPDATE:timestamp&#125; \| (?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:http_version&#125;)?|-) \| %&#123;URIPATH:uripath&#125; \| %&#123;NUMBER:response&#125; \| (?:%&#123;NUMBER:body_bytes_sent&#125;|-) \| (?:%&#123;NUMBER:bytes_sent&#125;|-) \| (?:%&#123;NOTSPACE:gzip_ratio&#125;|-) \| (?:%&#123;QS:http_referer&#125;|-) \| %&#123;QS:agent&#125; \| (?:%&#123;QS:http_x_forwarded_for&#125;|-) \| (%&#123;URIHOST:upstream_addr&#125;|-) \| (%&#123;BASE16FLOAT:upstream_response_time&#125;) \| %&#123;NUMBER:upstream_status&#125; \| (%&#123;BASE16FLOAT:request_time&#125;)</div></pre></td></tr></table></figure>
<p>在<a href="https://grokdebug.herokuapp.com/" target="_blank" rel="external">grop官网的debugger</a>解析结果如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;clientip&quot;: [</div><div class="line">    [</div><div class="line">      &quot;10.73.134.29&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;HOSTNAME&quot;: [</div><div class="line">    [</div><div class="line">      &quot;10.73.134.29&quot;,</div><div class="line">      &quot;117.121.58.159&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;IP&quot;: [</div><div class="line">    [</div><div class="line">      null,</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;IPV6&quot;: [</div><div class="line">    [</div><div class="line">      null,</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;IPV4&quot;: [</div><div class="line">    [</div><div class="line">      null,</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;timestamp&quot;: [</div><div class="line">    [</div><div class="line">      &quot;28/Nov/2016:16:13:07 +0800&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;MONTHDAY&quot;: [</div><div class="line">    [</div><div class="line">      &quot;28&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;MONTH&quot;: [</div><div class="line">    [</div><div class="line">      &quot;Nov&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;YEAR&quot;: [</div><div class="line">    [</div><div class="line">      &quot;2016&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;TIME&quot;: [</div><div class="line">    [</div><div class="line">      &quot;16:13:07&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;HOUR&quot;: [</div><div class="line">    [</div><div class="line">      &quot;16&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;MINUTE&quot;: [</div><div class="line">    [</div><div class="line">      &quot;13&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;SECOND&quot;: [</div><div class="line">    [</div><div class="line">      &quot;07&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;INT&quot;: [</div><div class="line">    [</div><div class="line">      &quot;+0800&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;verb&quot;: [</div><div class="line">    [</div><div class="line">      &quot;POST&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;request&quot;: [</div><div class="line">    [</div><div class="line">      &quot;/inner&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;http_version&quot;: [</div><div class="line">    [</div><div class="line">      &quot;1.1&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;BASE10NUM&quot;: [</div><div class="line">    [</div><div class="line">      &quot;1.1&quot;,</div><div class="line">      &quot;200&quot;,</div><div class="line">      &quot;243&quot;,</div><div class="line">      &quot;461&quot;,</div><div class="line">      &quot;200&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;uripath&quot;: [</div><div class="line">    [</div><div class="line">      &quot;/inner&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;response&quot;: [</div><div class="line">    [</div><div class="line">      &quot;200&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;body_bytes_sent&quot;: [</div><div class="line">    [</div><div class="line">      &quot;243&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;bytes_sent&quot;: [</div><div class="line">    [</div><div class="line">      &quot;461&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;gzip_ratio&quot;: [</div><div class="line">    [</div><div class="line">      &quot;-&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;http_referer&quot;: [</div><div class="line">    [</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;QUOTEDSTRING&quot;: [</div><div class="line">    [</div><div class="line">      null,</div><div class="line">      &quot;&quot;-&quot;&quot;,</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;agent&quot;: [</div><div class="line">    [</div><div class="line">      &quot;&quot;-&quot;&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;http_x_forwarded_for&quot;: [</div><div class="line">    [</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;upstream_addr&quot;: [</div><div class="line">    [</div><div class="line">      &quot;117.121.58.159:8001&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;IPORHOST&quot;: [</div><div class="line">    [</div><div class="line">      &quot;117.121.58.159&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;port&quot;: [</div><div class="line">    [</div><div class="line">      &quot;8001&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;upstream_response_time&quot;: [</div><div class="line">    [</div><div class="line">      &quot;0.046&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;upstream_status&quot;: [</div><div class="line">    [</div><div class="line">      &quot;200&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;request_time&quot;: [</div><div class="line">    [</div><div class="line">      &quot;0.046&quot;</div><div class="line">    ]</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>地理坐标分析-geoip</li>
</ol>
<ul>
<li>安装geoip数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd 你的logstash地址/logstash/etc</div><div class="line">curl -O &quot;http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz&quot;</div><div class="line">gunzip GeoLiteCity.dat.gz</div></pre></td></tr></table></figure>
<ul>
<li>配置logstash使用GeoIP</li>
</ul>
<p>只需要在filter里配置即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#地理坐标分析</div><div class="line">geoip &#123;</div><div class="line">	source =&gt; &quot;clientip&quot;</div><div class="line">	##这里指定好解压后GeoIP数据库文件的位置</div><div class="line">	database =&gt; &quot;替换为你的文件路径/logstash-2.4.1/etc/GeoLiteCity.dat&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong> GeoIP使用注意事项</strong></li>
</ul>
<p>如果你出现下面的错误<br><img src="http://i.imgur.com/WCmBdF9.jpg" alt=""></p>
<p>报错<code>No Compatible Fields: The “[nginx-access-]YYYY-MM” index pattern does not contain any of the following field types: geo_point</code></p>
<p>原因：索引格式为[nginx-access-]YYYY-MM的日志文件由logstash输出到Elasticsearch；在 elasticsearch 中，所有的数据都有一个类型，什么样的类型，就可以在其上做一些对应类型的特殊操作。geo信息中的location字段是经纬度，我们需要使用经纬度来定位地理位置；在 elasticsearch 中，对于经纬度来说，要想使用 elasticsearch 提供的地理位置查询相关的功能，就需要构造一个结构，并且将其类型属性设置为geo_point，此错误明显是由于我们的geo的location字段类型不是geo_point。</p>
<p><strong>解决方法：</strong>Elasticsearch 支持给索引预定义设置和 mapping(前提是你用的 elasticsearch 版本支持这个 API，不过估计应该都支持)。其实ES中已经有一个默认预定义的模板，我们只要使用预定的模板即可，我们在ES中看下模板。简而言之就是<strong>output的index名称，必须以<code>logstash-</code>开头</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">	if [type] == &quot;nginx_lehi_access&quot; &#123; #nginx-access</div><div class="line">		elasticsearch &#123;</div><div class="line">			action =&gt; &quot;index&quot;          #The operation on ES</div><div class="line">			hosts  =&gt; [替换为你的ES服务器列表，字符串数组格式]   #ElasticSearch host, can be array.</div><div class="line">			index  =&gt; &quot;logstash-nginx_lehi_access&quot;         #The index to write data to.</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="logstash完整配置文件"><a href="#logstash完整配置文件" class="headerlink" title="logstash完整配置文件"></a>logstash完整配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">	file &#123;</div><div class="line">		type =&gt; &quot;nginx_lehi_access&quot;  </div><div class="line">        #监听文件的路径</div><div class="line">        path =&gt; &quot;替换为你的日志文件路径/access.log&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">	if [type] == &quot;nginx_lehi_access&quot; &#123;</div><div class="line">		#定义数据的格式</div><div class="line">		grok &#123;</div><div class="line">			match =&gt; [</div><div class="line">				&quot;message&quot;, &quot;%&#123;IPORHOST:clientip&#125; \| %&#123;HTTPDATE:timestamp&#125; \| (?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:http_version&#125;)?|-) \| %&#123;URIPATH:uripath&#125; \| %&#123;NUMBER:response&#125; \| (?:%&#123;NUMBER:body_bytes_sent&#125;|-) \| (?:%&#123;NUMBER:bytes_sent&#125;|-) \| (?:%&#123;NOTSPACE:gzip_ratio&#125;|-) \| (?:%&#123;QS:http_referer&#125;|-) \| %&#123;QS:user_agent&#125; \| (?:%&#123;QS:http_x_forwarded_for&#125;|-) \| (%&#123;URIHOST:upstream_addr&#125;|-) \| (%&#123;BASE16FLOAT:upstream_response_time&#125;) \| %&#123;NUMBER:upstream_status&#125; \| (%&#123;BASE16FLOAT:request_time&#125;)&quot;</div><div class="line">			]</div><div class="line">		&#125;</div><div class="line">		#定义时间戳的格式</div><div class="line">		date &#123;</div><div class="line">			match =&gt; [ &quot;timestamp&quot; , &quot;dd/MMM/YYYY:HH:mm:ss Z&quot; ]</div><div class="line">		&#125;</div><div class="line">		#地理坐标分析</div><div class="line">		geoip &#123;</div><div class="line">			source =&gt; &quot;clientip&quot;</div><div class="line">			##这里指定好解压后GeoIP数据库文件的位置</div><div class="line">			database =&gt; &quot;替换为你的文件路径/logstash-2.4.1/etc/GeoLiteCity.dat&quot;</div><div class="line">		&#125;</div><div class="line">		#同样地还有客户端的UA，由于UA的格式比较多，logstash也会自动去分析，提取操作系统等相关信息</div><div class="line">		#定义客户端设备是哪一个字段</div><div class="line">		useragent &#123;</div><div class="line">			source =&gt; &quot;user_agent&quot;</div><div class="line">			target =&gt; &quot;userAgent&quot;</div><div class="line">		&#125;</div><div class="line">		#把所有字段进行urldecode（显示中文）</div><div class="line">		urldecode &#123;</div><div class="line">			all_fields =&gt; true</div><div class="line">		&#125;</div><div class="line">		#需要进行转换的字段，这里是将访问的时间转成int，再传给Elasticsearch。注：似乎没有double，只有float，这里我没有深入研究，总之写double不对。</div><div class="line">		mutate &#123;</div><div class="line">			gsub =&gt; [&quot;user_agent&quot;,&quot;[\&quot;]&quot;,&quot;&quot;]        #将user_agent中的 &quot; 换成空</div><div class="line">			convert =&gt; [ &quot;response&quot;,&quot;integer&quot; ]</div><div class="line">			convert =&gt; [ &quot;body_bytes_sent&quot;,&quot;integer&quot; ]</div><div class="line">			convert =&gt; [ &quot;bytes_sent&quot;,&quot;integer&quot; ]</div><div class="line">			convert =&gt; [ &quot;upstream_response_time&quot;,&quot;float&quot; ]</div><div class="line">			convert =&gt; [ &quot;upstream_status&quot;,&quot;integer&quot; ]</div><div class="line">			convert =&gt; [ &quot;request_time&quot;,&quot;float&quot; ]</div><div class="line">			convert =&gt; [ &quot;port&quot;,&quot;integer&quot; ]</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">	if [type] == &quot;nginx_lehi_access&quot; &#123; #nginx-access</div><div class="line">		elasticsearch &#123;</div><div class="line">			action =&gt; &quot;index&quot;          #The operation on ES</div><div class="line">			hosts  =&gt; [替换为你的ES服务器列表，字符串数组格式]   #ElasticSearch host, can be array.</div><div class="line">			index  =&gt; &quot;logstash-nginx_lehi_access&quot;         #The index to write data to.</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ES数据查看"><a href="#ES数据查看" class="headerlink" title="ES数据查看"></a>ES数据查看</h2><p>到此，就可以在ES中查看具体解析出来的数据是什么样子的了</p>
<p>进入<code>http://你的IP：PORT/_plugin/head/</code>，点击<code>数据浏览</code>，找到你的nginx索引，选一条点击查看生成的索引原始数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&quot;_index&quot;: &quot;logstash-nginx_lehi_access&quot;,</div><div class="line">	&quot;_type&quot;: &quot;nginx_lehi_access&quot;,</div><div class="line">	&quot;_id&quot;: &quot;AViqy6DEzXT_yrqr__Ka&quot;,</div><div class="line">	&quot;_version&quot;: 1,</div><div class="line">	&quot;_score&quot;: 1,</div><div class="line">	&quot;_source&quot;: &#123;</div><div class="line">		&quot;message&quot;: &quot;116.226.72.255 | 28/Nov/2016:19:57:00 +0800 | POST /api HTTP/1.1 | /api | 200 | 1314 | 1533 | - | - | &quot;Dalvik/2.1.0(Linux;U;Android6.0;LetvX501Build/DBXCNOP5801810092S)&quot; | - | 117.121.58.159:8001 | 0.023 | 200 | 0.023&quot;,</div><div class="line">		&quot;@version&quot;: &quot;1&quot;,</div><div class="line">		&quot;@timestamp&quot;: &quot;2016-11-28T11:57:00.000Z&quot;,</div><div class="line">		&quot;path&quot;: &quot;/letv/logs/nginx/lehi/access.log&quot;,</div><div class="line">		&quot;host&quot;: &quot;vm-29-19-pro01-bgp.bj-cn.vpc.letv.cn&quot;,</div><div class="line">		&quot;type&quot;: &quot;nginx_lehi_access&quot;,</div><div class="line">		&quot;clientip&quot;: &quot;116.226.72.255&quot;,</div><div class="line">		&quot;timestamp&quot;: &quot;28/Nov/2016:19:57:00 +0800&quot;,</div><div class="line">		&quot;verb&quot;: &quot;POST&quot;,</div><div class="line">		&quot;request&quot;: &quot;/api&quot;,</div><div class="line">		&quot;http_version&quot;: &quot;1.1&quot;,</div><div class="line">		&quot;uripath&quot;: &quot;/api&quot;,</div><div class="line">		&quot;response&quot;: 200,</div><div class="line">		&quot;body_bytes_sent&quot;: 1314,</div><div class="line">		&quot;bytes_sent&quot;: 1533,</div><div class="line">		&quot;gzip_ratio&quot;: &quot;-&quot;,</div><div class="line">		&quot;user_agent&quot;: &quot;Dalvik/2.1.0 (Linux; U; Android 6.0; Letv X501 Build/DBXCNOP5801810092S)&quot;,</div><div class="line">		&quot;upstream_addr&quot;: &quot;117.121.58.159:8001&quot;,</div><div class="line">		&quot;port&quot;: 8001,</div><div class="line">		&quot;upstream_response_time&quot;: 0.023,</div><div class="line">		&quot;upstream_status&quot;: 200,</div><div class="line">		&quot;request_time&quot;: 0.023,</div><div class="line">		&quot;geoip&quot;: &#123;</div><div class="line">			&quot;ip&quot;: &quot;116.226.72.255&quot;,</div><div class="line">			&quot;country_code2&quot;: &quot;CN&quot;,</div><div class="line">			&quot;country_code3&quot;: &quot;CHN&quot;,</div><div class="line">			&quot;country_name&quot;: &quot;China&quot;,</div><div class="line">			&quot;continent_code&quot;: &quot;AS&quot;,</div><div class="line">			&quot;region_name&quot;: &quot;23&quot;,</div><div class="line">			&quot;city_name&quot;: &quot;Shanghai&quot;,</div><div class="line">			&quot;latitude&quot;: 31.045600000000007,</div><div class="line">			&quot;longitude&quot;: 121.3997,</div><div class="line">			&quot;timezone&quot;: &quot;Asia/Shanghai&quot;,</div><div class="line">			&quot;real_region_name&quot;: &quot;Shanghai&quot;,</div><div class="line">			&quot;location&quot;: [121.3997,</div><div class="line">			31.045600000000007]</div><div class="line">		&#125;,</div><div class="line">		&quot;userAgent&quot;: &#123;</div><div class="line">			&quot;name&quot;: &quot;Android&quot;,</div><div class="line">			&quot;os&quot;: &quot;Android 6.0&quot;,</div><div class="line">			&quot;os_name&quot;: &quot;Android&quot;,</div><div class="line">			&quot;os_major&quot;: &quot;6&quot;,</div><div class="line">			&quot;os_minor&quot;: &quot;0&quot;,</div><div class="line">			&quot;device&quot;: &quot;Letv X501&quot;,</div><div class="line">			&quot;major&quot;: &quot;6&quot;,</div><div class="line">			&quot;minor&quot;: &quot;0&quot;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="kibana图表生成分析"><a href="#kibana图表生成分析" class="headerlink" title="kibana图表生成分析"></a>kibana图表生成分析</h2><blockquote>
<p>这里请参考<a href="http://blog.csdn.net/wmj2004/article/details/53216018" target="_blank" rel="external">logstash日志分析的配置和使用(设计模板)</a></p>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>logstash在启动时报错：默认是4个线程，但是只能创建一个线程。</li>
</ol>
<p>这是同一个<code>log4j_to_es.conf</code>配置了多个<code>input-file</code>并且配置了<code>multiline</code>后出现的问题，应该把<code>multiline</code>配置从filter中移动到input中去：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">file &#123;</div><div class="line">	type =&gt; &quot;whatsliveapi&quot;</div><div class="line">    #监听文件的路径</div><div class="line">    path =&gt; &quot;/letv/logs/apps/api/whatslive/api_8001.log&quot;</div><div class="line">	codec =&gt; multiline &#123;</div><div class="line">	   pattern =&gt; &quot;^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;\s\d&#123;1,2&#125;:\d&#123;1,2&#125;:\d&#123;1,2&#125;&quot;</div><div class="line">	   negate =&gt; true</div><div class="line">	   what =&gt; &quot;previous&quot;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>在kibana中无法选择geoip以及userAgent的字段</li>
</ol>
<p>解决办法：进入<em>kibana-settings-indices</em>,点击你的索引，然后点击<strong>刷新按钮</strong>即可</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.csdn.net/wmj2004/article/details/53216018" target="_blank" rel="external">logstash日志分析的配置和使用(设计模板)</a></li>
<li><a href="http://blog.csdn.net/yanggd1987/article/details/50469113" target="_blank" rel="external">Kibana的图形化——Tile Map</a></li>
<li><a href="http://www.cnblogs.com/yjf512/p/4199105.html" target="_blank" rel="external">使用elk+redis搭建nginx日志分析平台</a></li>
<li><a href="http://www.wklken.me/posts/2015/04/26/elk-for-nginx-log.html" target="_blank" rel="external">LOGSTASH+ELASTICSEARCH+KIBANA处理NGINX访问日志</a></li>
<li><a href="http://www.cnblogs.com/Orgliny/p/5592186.html" target="_blank" rel="external">ogstash使用grok过滤nginx日志（二）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;由于公司没有日志收集系统，所以之前搭建了一个ELK日志收集分析系统，如此一来查询日志就方便了很多，再加上ELK的一些方便实用的索引分析功能，
    
    </summary>
    
      <category term="ELK" scheme="ttp://liubenlong.github.io/categories/ELK/"/>
    
    
      <category term="环境搭建" scheme="ttp://liubenlong.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="ELK" scheme="ttp://liubenlong.github.io/tags/ELK/"/>
    
      <category term="elasticsearch" scheme="ttp://liubenlong.github.io/tags/elasticsearch/"/>
    
      <category term="kibana" scheme="ttp://liubenlong.github.io/tags/kibana/"/>
    
      <category term="logstash" scheme="ttp://liubenlong.github.io/tags/logstash/"/>
    
      <category term="nginx" scheme="ttp://liubenlong.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>ELK 之 nginx日志分析（原创）</title>
    <link href="ttp://liubenlong.github.io/2016/11/29/java%E9%AB%98%E5%B9%B6%E5%8F%91/Disruptor/disruptor%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%AB/"/>
    <id>ttp://liubenlong.github.io/2016/11/29/java高并发/Disruptor/disruptor学习教程（二）为什么快/</id>
    <published>2016-11-28T16:00:00.000Z</published>
    <updated>2016-11-29T03:28:41.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>由于公司没有日志收集系统，所以之前搭建了一个ELK日志收集分析系统，如此一来查询日志就方便了很多，再加上ELK的一些方便实用的索引分析功能，可以将数据已图表形式展现，一目了然。</p>
<p>网上好多都是采用了ELK+redis的架构，但考虑到目前公司业务不是很多，所以没有加入redis一层</p>
<p><img src="http://i.imgur.com/EkD3F9G.png" alt=""></p>
<blockquote>
<p>ELK的安装请参考我上一篇文章 <a href="http://liubenlong.github.io/2016/11/24/ELK-ELK%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">ELK环境搭建</a></p>
</blockquote>
<h1 id="日志收集配置"><a href="#日志收集配置" class="headerlink" title="日志收集配置"></a>日志收集配置</h1><p>其实你的ELK系统搭建完成以后，剩下的主要就是logstash收集配置的编写以及整个系统的性能调优了，性能调优后续在写。<br>这里会逐步说明配置的一些含义，后面会将完整配置贴出。</p>
<p>nginx日志是自定义的格式，所以需要用logstash将message格式化存储到ES中，这里采用grok过滤器，使用match正则表达式解析，根据自己的log_format定制。</p>
<ol>
<li>nginx日志</li>
</ol>
<ul>
<li><strong>nginx中log_format的配置</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log_format  main  &apos;$remote_addr | $time_local | $request | $uri | &apos;</div><div class="line">                      &apos;$status | $body_bytes_sent | $bytes_sent | $gzip_ratio | $http_referer | &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; | $http_x_forwarded_for | $upstream_addr | $upstream_response_time | $upstream_status | $request_time&apos;;</div></pre></td></tr></table></figure>
<ul>
<li><strong>输出的日志</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IP地址 | 29/Nov/2016:10:25:16 +0800 | POST /api HTTP/1.1 | /api | 200 | 108 | 326 | - | - | &quot;UGCLehiGphoneClient/2.9.0 Mozilla/5.0 (Linux; Android 5.0.2; X800 Build/BBXCNOP5500710201S) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile Safari/537.36&quot; | - | IP地址:端口号 | 0.058 | 200 | 0.058</div></pre></td></tr></table></figure>
<ol>
<li>编写正则表达式</li>
</ol>
<blockquote>
<p>这里可以借助<a href="https://grokdebug.herokuapp.com/" target="_blank" rel="external">grop官网的debugger</a>和<a href="https://grokdebug.herokuapp.com/patterns#" target="_blank" rel="external">patterns</a>来快速帮助我们写正则表达式</p>
</blockquote>
<p>对应上面输出的日志，我写的正则表达式如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%&#123;IPORHOST:clientip&#125; \| %&#123;HTTPDATE:timestamp&#125; \| (?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:http_version&#125;)?|-) \| %&#123;URIPATH:uripath&#125; \| %&#123;NUMBER:response&#125; \| (?:%&#123;NUMBER:body_bytes_sent&#125;|-) \| (?:%&#123;NUMBER:bytes_sent&#125;|-) \| (?:%&#123;NOTSPACE:gzip_ratio&#125;|-) \| (?:%&#123;QS:http_referer&#125;|-) \| %&#123;QS:agent&#125; \| (?:%&#123;QS:http_x_forwarded_for&#125;|-) \| (%&#123;URIHOST:upstream_addr&#125;|-) \| (%&#123;BASE16FLOAT:upstream_response_time&#125;) \| %&#123;NUMBER:upstream_status&#125; \| (%&#123;BASE16FLOAT:request_time&#125;)</div></pre></td></tr></table></figure>
<p>在<a href="https://grokdebug.herokuapp.com/" target="_blank" rel="external">grop官网的debugger</a>解析结果如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;clientip&quot;: [</div><div class="line">    [</div><div class="line">      &quot;10.73.134.29&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;HOSTNAME&quot;: [</div><div class="line">    [</div><div class="line">      &quot;10.73.134.29&quot;,</div><div class="line">      &quot;117.121.58.159&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;IP&quot;: [</div><div class="line">    [</div><div class="line">      null,</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;IPV6&quot;: [</div><div class="line">    [</div><div class="line">      null,</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;IPV4&quot;: [</div><div class="line">    [</div><div class="line">      null,</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;timestamp&quot;: [</div><div class="line">    [</div><div class="line">      &quot;28/Nov/2016:16:13:07 +0800&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;MONTHDAY&quot;: [</div><div class="line">    [</div><div class="line">      &quot;28&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;MONTH&quot;: [</div><div class="line">    [</div><div class="line">      &quot;Nov&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;YEAR&quot;: [</div><div class="line">    [</div><div class="line">      &quot;2016&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;TIME&quot;: [</div><div class="line">    [</div><div class="line">      &quot;16:13:07&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;HOUR&quot;: [</div><div class="line">    [</div><div class="line">      &quot;16&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;MINUTE&quot;: [</div><div class="line">    [</div><div class="line">      &quot;13&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;SECOND&quot;: [</div><div class="line">    [</div><div class="line">      &quot;07&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;INT&quot;: [</div><div class="line">    [</div><div class="line">      &quot;+0800&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;verb&quot;: [</div><div class="line">    [</div><div class="line">      &quot;POST&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;request&quot;: [</div><div class="line">    [</div><div class="line">      &quot;/inner&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;http_version&quot;: [</div><div class="line">    [</div><div class="line">      &quot;1.1&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;BASE10NUM&quot;: [</div><div class="line">    [</div><div class="line">      &quot;1.1&quot;,</div><div class="line">      &quot;200&quot;,</div><div class="line">      &quot;243&quot;,</div><div class="line">      &quot;461&quot;,</div><div class="line">      &quot;200&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;uripath&quot;: [</div><div class="line">    [</div><div class="line">      &quot;/inner&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;response&quot;: [</div><div class="line">    [</div><div class="line">      &quot;200&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;body_bytes_sent&quot;: [</div><div class="line">    [</div><div class="line">      &quot;243&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;bytes_sent&quot;: [</div><div class="line">    [</div><div class="line">      &quot;461&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;gzip_ratio&quot;: [</div><div class="line">    [</div><div class="line">      &quot;-&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;http_referer&quot;: [</div><div class="line">    [</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;QUOTEDSTRING&quot;: [</div><div class="line">    [</div><div class="line">      null,</div><div class="line">      &quot;&quot;-&quot;&quot;,</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;agent&quot;: [</div><div class="line">    [</div><div class="line">      &quot;&quot;-&quot;&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;http_x_forwarded_for&quot;: [</div><div class="line">    [</div><div class="line">      null</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;upstream_addr&quot;: [</div><div class="line">    [</div><div class="line">      &quot;117.121.58.159:8001&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;IPORHOST&quot;: [</div><div class="line">    [</div><div class="line">      &quot;117.121.58.159&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;port&quot;: [</div><div class="line">    [</div><div class="line">      &quot;8001&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;upstream_response_time&quot;: [</div><div class="line">    [</div><div class="line">      &quot;0.046&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;upstream_status&quot;: [</div><div class="line">    [</div><div class="line">      &quot;200&quot;</div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  &quot;request_time&quot;: [</div><div class="line">    [</div><div class="line">      &quot;0.046&quot;</div><div class="line">    ]</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>地理坐标分析-geoip</li>
</ol>
<ul>
<li>安装geoip数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd 你的logstash地址/logstash/etc</div><div class="line">curl -O &quot;http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz&quot;</div><div class="line">gunzip GeoLiteCity.dat.gz</div></pre></td></tr></table></figure>
<ul>
<li>配置logstash使用GeoIP</li>
</ul>
<p>只需要在filter里配置即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#地理坐标分析</div><div class="line">geoip &#123;</div><div class="line">	source =&gt; &quot;clientip&quot;</div><div class="line">	##这里指定好解压后GeoIP数据库文件的位置</div><div class="line">	database =&gt; &quot;替换为你的文件路径/logstash-2.4.1/etc/GeoLiteCity.dat&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong> GeoIP使用注意事项</strong></li>
</ul>
<p>如果你出现下面的错误<br><img src="http://i.imgur.com/WCmBdF9.jpg" alt=""></p>
<p>报错<code>No Compatible Fields: The “[nginx-access-]YYYY-MM” index pattern does not contain any of the following field types: geo_point</code></p>
<p>原因：索引格式为[nginx-access-]YYYY-MM的日志文件由logstash输出到Elasticsearch；在 elasticsearch 中，所有的数据都有一个类型，什么样的类型，就可以在其上做一些对应类型的特殊操作。geo信息中的location字段是经纬度，我们需要使用经纬度来定位地理位置；在 elasticsearch 中，对于经纬度来说，要想使用 elasticsearch 提供的地理位置查询相关的功能，就需要构造一个结构，并且将其类型属性设置为geo_point，此错误明显是由于我们的geo的location字段类型不是geo_point。</p>
<p><strong>解决方法：</strong>Elasticsearch 支持给索引预定义设置和 mapping(前提是你用的 elasticsearch 版本支持这个 API，不过估计应该都支持)。其实ES中已经有一个默认预定义的模板，我们只要使用预定的模板即可，我们在ES中看下模板。简而言之就是<strong>output的index名称，必须以<code>logstash-</code>开头</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">	if [type] == &quot;nginx_lehi_access&quot; &#123; #nginx-access</div><div class="line">		elasticsearch &#123;</div><div class="line">			action =&gt; &quot;index&quot;          #The operation on ES</div><div class="line">			hosts  =&gt; [替换为你的ES服务器列表，字符串数组格式]   #ElasticSearch host, can be array.</div><div class="line">			index  =&gt; &quot;logstash-nginx_lehi_access&quot;         #The index to write data to.</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="logstash完整配置文件"><a href="#logstash完整配置文件" class="headerlink" title="logstash完整配置文件"></a>logstash完整配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">	file &#123;</div><div class="line">		type =&gt; &quot;nginx_lehi_access&quot;  </div><div class="line">        #监听文件的路径</div><div class="line">        path =&gt; &quot;替换为你的日志文件路径/access.log&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">	if [type] == &quot;nginx_lehi_access&quot; &#123;</div><div class="line">		#定义数据的格式</div><div class="line">		grok &#123;</div><div class="line">			match =&gt; [</div><div class="line">				&quot;message&quot;, &quot;%&#123;IPORHOST:clientip&#125; \| %&#123;HTTPDATE:timestamp&#125; \| (?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:http_version&#125;)?|-) \| %&#123;URIPATH:uripath&#125; \| %&#123;NUMBER:response&#125; \| (?:%&#123;NUMBER:body_bytes_sent&#125;|-) \| (?:%&#123;NUMBER:bytes_sent&#125;|-) \| (?:%&#123;NOTSPACE:gzip_ratio&#125;|-) \| (?:%&#123;QS:http_referer&#125;|-) \| %&#123;QS:user_agent&#125; \| (?:%&#123;QS:http_x_forwarded_for&#125;|-) \| (%&#123;URIHOST:upstream_addr&#125;|-) \| (%&#123;BASE16FLOAT:upstream_response_time&#125;) \| %&#123;NUMBER:upstream_status&#125; \| (%&#123;BASE16FLOAT:request_time&#125;)&quot;</div><div class="line">			]</div><div class="line">		&#125;</div><div class="line">		#定义时间戳的格式</div><div class="line">		date &#123;</div><div class="line">			match =&gt; [ &quot;timestamp&quot; , &quot;dd/MMM/YYYY:HH:mm:ss Z&quot; ]</div><div class="line">		&#125;</div><div class="line">		#地理坐标分析</div><div class="line">		geoip &#123;</div><div class="line">			source =&gt; &quot;clientip&quot;</div><div class="line">			##这里指定好解压后GeoIP数据库文件的位置</div><div class="line">			database =&gt; &quot;替换为你的文件路径/logstash-2.4.1/etc/GeoLiteCity.dat&quot;</div><div class="line">		&#125;</div><div class="line">		#同样地还有客户端的UA，由于UA的格式比较多，logstash也会自动去分析，提取操作系统等相关信息</div><div class="line">		#定义客户端设备是哪一个字段</div><div class="line">		useragent &#123;</div><div class="line">			source =&gt; &quot;user_agent&quot;</div><div class="line">			target =&gt; &quot;userAgent&quot;</div><div class="line">		&#125;</div><div class="line">		#把所有字段进行urldecode（显示中文）</div><div class="line">		urldecode &#123;</div><div class="line">			all_fields =&gt; true</div><div class="line">		&#125;</div><div class="line">		#需要进行转换的字段，这里是将访问的时间转成int，再传给Elasticsearch。注：似乎没有double，只有float，这里我没有深入研究，总之写double不对。</div><div class="line">		mutate &#123;</div><div class="line">			gsub =&gt; [&quot;user_agent&quot;,&quot;[\&quot;]&quot;,&quot;&quot;]        #将user_agent中的 &quot; 换成空</div><div class="line">			convert =&gt; [ &quot;response&quot;,&quot;integer&quot; ]</div><div class="line">			convert =&gt; [ &quot;body_bytes_sent&quot;,&quot;integer&quot; ]</div><div class="line">			convert =&gt; [ &quot;bytes_sent&quot;,&quot;integer&quot; ]</div><div class="line">			convert =&gt; [ &quot;upstream_response_time&quot;,&quot;float&quot; ]</div><div class="line">			convert =&gt; [ &quot;upstream_status&quot;,&quot;integer&quot; ]</div><div class="line">			convert =&gt; [ &quot;request_time&quot;,&quot;float&quot; ]</div><div class="line">			convert =&gt; [ &quot;port&quot;,&quot;integer&quot; ]</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">	if [type] == &quot;nginx_lehi_access&quot; &#123; #nginx-access</div><div class="line">		elasticsearch &#123;</div><div class="line">			action =&gt; &quot;index&quot;          #The operation on ES</div><div class="line">			hosts  =&gt; [替换为你的ES服务器列表，字符串数组格式]   #ElasticSearch host, can be array.</div><div class="line">			index  =&gt; &quot;logstash-nginx_lehi_access&quot;         #The index to write data to.</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ES数据查看"><a href="#ES数据查看" class="headerlink" title="ES数据查看"></a>ES数据查看</h2><p>到此，就可以在ES中查看具体解析出来的数据是什么样子的了</p>
<p>进入<code>http://你的IP：PORT/_plugin/head/</code>，点击<code>数据浏览</code>，找到你的nginx索引，选一条点击查看生成的索引原始数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&quot;_index&quot;: &quot;logstash-nginx_lehi_access&quot;,</div><div class="line">	&quot;_type&quot;: &quot;nginx_lehi_access&quot;,</div><div class="line">	&quot;_id&quot;: &quot;AViqy6DEzXT_yrqr__Ka&quot;,</div><div class="line">	&quot;_version&quot;: 1,</div><div class="line">	&quot;_score&quot;: 1,</div><div class="line">	&quot;_source&quot;: &#123;</div><div class="line">		&quot;message&quot;: &quot;116.226.72.255 | 28/Nov/2016:19:57:00 +0800 | POST /api HTTP/1.1 | /api | 200 | 1314 | 1533 | - | - | &quot;Dalvik/2.1.0(Linux;U;Android6.0;LetvX501Build/DBXCNOP5801810092S)&quot; | - | 117.121.58.159:8001 | 0.023 | 200 | 0.023&quot;,</div><div class="line">		&quot;@version&quot;: &quot;1&quot;,</div><div class="line">		&quot;@timestamp&quot;: &quot;2016-11-28T11:57:00.000Z&quot;,</div><div class="line">		&quot;path&quot;: &quot;/letv/logs/nginx/lehi/access.log&quot;,</div><div class="line">		&quot;host&quot;: &quot;vm-29-19-pro01-bgp.bj-cn.vpc.letv.cn&quot;,</div><div class="line">		&quot;type&quot;: &quot;nginx_lehi_access&quot;,</div><div class="line">		&quot;clientip&quot;: &quot;116.226.72.255&quot;,</div><div class="line">		&quot;timestamp&quot;: &quot;28/Nov/2016:19:57:00 +0800&quot;,</div><div class="line">		&quot;verb&quot;: &quot;POST&quot;,</div><div class="line">		&quot;request&quot;: &quot;/api&quot;,</div><div class="line">		&quot;http_version&quot;: &quot;1.1&quot;,</div><div class="line">		&quot;uripath&quot;: &quot;/api&quot;,</div><div class="line">		&quot;response&quot;: 200,</div><div class="line">		&quot;body_bytes_sent&quot;: 1314,</div><div class="line">		&quot;bytes_sent&quot;: 1533,</div><div class="line">		&quot;gzip_ratio&quot;: &quot;-&quot;,</div><div class="line">		&quot;user_agent&quot;: &quot;Dalvik/2.1.0 (Linux; U; Android 6.0; Letv X501 Build/DBXCNOP5801810092S)&quot;,</div><div class="line">		&quot;upstream_addr&quot;: &quot;117.121.58.159:8001&quot;,</div><div class="line">		&quot;port&quot;: 8001,</div><div class="line">		&quot;upstream_response_time&quot;: 0.023,</div><div class="line">		&quot;upstream_status&quot;: 200,</div><div class="line">		&quot;request_time&quot;: 0.023,</div><div class="line">		&quot;geoip&quot;: &#123;</div><div class="line">			&quot;ip&quot;: &quot;116.226.72.255&quot;,</div><div class="line">			&quot;country_code2&quot;: &quot;CN&quot;,</div><div class="line">			&quot;country_code3&quot;: &quot;CHN&quot;,</div><div class="line">			&quot;country_name&quot;: &quot;China&quot;,</div><div class="line">			&quot;continent_code&quot;: &quot;AS&quot;,</div><div class="line">			&quot;region_name&quot;: &quot;23&quot;,</div><div class="line">			&quot;city_name&quot;: &quot;Shanghai&quot;,</div><div class="line">			&quot;latitude&quot;: 31.045600000000007,</div><div class="line">			&quot;longitude&quot;: 121.3997,</div><div class="line">			&quot;timezone&quot;: &quot;Asia/Shanghai&quot;,</div><div class="line">			&quot;real_region_name&quot;: &quot;Shanghai&quot;,</div><div class="line">			&quot;location&quot;: [121.3997,</div><div class="line">			31.045600000000007]</div><div class="line">		&#125;,</div><div class="line">		&quot;userAgent&quot;: &#123;</div><div class="line">			&quot;name&quot;: &quot;Android&quot;,</div><div class="line">			&quot;os&quot;: &quot;Android 6.0&quot;,</div><div class="line">			&quot;os_name&quot;: &quot;Android&quot;,</div><div class="line">			&quot;os_major&quot;: &quot;6&quot;,</div><div class="line">			&quot;os_minor&quot;: &quot;0&quot;,</div><div class="line">			&quot;device&quot;: &quot;Letv X501&quot;,</div><div class="line">			&quot;major&quot;: &quot;6&quot;,</div><div class="line">			&quot;minor&quot;: &quot;0&quot;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="kibana图表生成分析"><a href="#kibana图表生成分析" class="headerlink" title="kibana图表生成分析"></a>kibana图表生成分析</h2><blockquote>
<p>这里请参考<a href="http://blog.csdn.net/wmj2004/article/details/53216018" target="_blank" rel="external">logstash日志分析的配置和使用(设计模板)</a></p>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>logstash在启动时报错：默认是4个线程，但是只能创建一个线程。</li>
</ol>
<p>这是同一个<code>log4j_to_es.conf</code>配置了多个<code>input-file</code>并且配置了<code>multiline</code>后出现的问题，应该把<code>multiline</code>配置从filter中移动到input中去：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">file &#123;</div><div class="line">	type =&gt; &quot;whatsliveapi&quot;</div><div class="line">    #监听文件的路径</div><div class="line">    path =&gt; &quot;/letv/logs/apps/api/whatslive/api_8001.log&quot;</div><div class="line">	codec =&gt; multiline &#123;</div><div class="line">	   pattern =&gt; &quot;^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;\s\d&#123;1,2&#125;:\d&#123;1,2&#125;:\d&#123;1,2&#125;&quot;</div><div class="line">	   negate =&gt; true</div><div class="line">	   what =&gt; &quot;previous&quot;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>在kibana中无法选择geoip以及userAgent的字段</li>
</ol>
<p>解决办法：进入<em>kibana-settings-indices</em>,点击你的索引，然后点击<strong>刷新按钮</strong>即可</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://blog.csdn.net/wmj2004/article/details/53216018" target="_blank" rel="external">logstash日志分析的配置和使用(设计模板)</a></li>
<li><a href="http://blog.csdn.net/yanggd1987/article/details/50469113" target="_blank" rel="external">Kibana的图形化——Tile Map</a></li>
<li><a href="http://www.cnblogs.com/yjf512/p/4199105.html" target="_blank" rel="external">使用elk+redis搭建nginx日志分析平台</a></li>
<li><a href="http://www.wklken.me/posts/2015/04/26/elk-for-nginx-log.html" target="_blank" rel="external">LOGSTASH+ELASTICSEARCH+KIBANA处理NGINX访问日志</a></li>
<li><a href="http://www.cnblogs.com/Orgliny/p/5592186.html" target="_blank" rel="external">ogstash使用grok过滤nginx日志（二）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;由于公司没有日志收集系统，所以之前搭建了一个ELK日志收集分析系统，如此一来查询日志就方便了很多，再加上ELK的一些方便实用的索引分析功能，
    
    </summary>
    
      <category term="ELK" scheme="ttp://liubenlong.github.io/categories/ELK/"/>
    
    
      <category term="环境搭建" scheme="ttp://liubenlong.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="ELK" scheme="ttp://liubenlong.github.io/tags/ELK/"/>
    
      <category term="elasticsearch" scheme="ttp://liubenlong.github.io/tags/elasticsearch/"/>
    
      <category term="kibana" scheme="ttp://liubenlong.github.io/tags/kibana/"/>
    
      <category term="logstash" scheme="ttp://liubenlong.github.io/tags/logstash/"/>
    
      <category term="nginx" scheme="ttp://liubenlong.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>ELK环境搭建（原创）</title>
    <link href="ttp://liubenlong.github.io/2016/11/24/ELK/ELK%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>ttp://liubenlong.github.io/2016/11/24/ELK/ELK环境搭建/</id>
    <published>2016-11-23T16:00:00.000Z</published>
    <updated>2016-12-09T09:29:41.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h1><p>Linux系统</p>
<ul>
<li>elasticsearch-2.4.2.tar.gz</li>
<li>logstash-2.4.1.tar.gz</li>
<li>kibana-4.6.3-linux-x86_64.tar.gz</li>
</ul>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>本节内容摘自<a href="http://baidu.blog.51cto.com/71938/1676798" target="_blank" rel="external">http://baidu.blog.51cto.com/71938/1676798</a></p>
<pre><code>  日志主要包括系统日志、应用程序日志和安全日志。系统运维和开发人员可以通过日志了解服务器软硬件信息、检查配置过程中的错误及错误发生的原因。经常分析日志可以了解服务器的负荷，性能安全性，从而及时采取措施纠正错误。
  通常，日志被分散的储存不同的设备上。如果你管理数十上百台服务器，你还在使用依次登录每台机器的传统方法查阅日志。这样是不是感觉很繁琐和    效率低下。当务之急我们使用集中化的日志管理，例如：开源的syslog，将所有服务器上的日志收集汇总。
集中化管理日志后，日志的统计和检索又成为一件比较麻烦的事情，一般我们使用grep、awk和wc等Linux命令能实现检索和统计，但是对于要求更高的查询、排序和统计等要求和庞大的机器数量依然使用这样的方法难免有点力不从心。
开源实时日志分析ELK平台能够完美的解决我们上述的问题，ELK由ElasticSearch、Logstash和Kiabana三个开源工具组成。官方网站：https://www.elastic.co/products
</code></pre><ul>
<li>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</li>
<li>Logstash是一个完全开源的工具，他可以对你的日志进行收集、分析，并将其存储供以后使用（如，搜索）。</li>
<li>kibana 也是一个开源和免费的工具，他Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、     分析和搜索重要数据日志。</li>
</ul>
<p>工作原理如下如所示：<br><img src="http://i.imgur.com/wBcJG0S.jpg" alt=""><br>    在需要收集日志的所有服务上部署logstash，作为logstash agent（logstash shipper）用于监控并过滤收集日志，将过滤后的内容发送到logstash indexer，logstash indexer将日志收集在一起交给全文搜索服务ElasticSearch，可以用ElasticSearch进行自定义搜索通过Kibana 来结合自定义搜索进行页面展示。</p>
<h1 id="elasticsearch集群安装"><a href="#elasticsearch集群安装" class="headerlink" title="elasticsearch集群安装"></a>elasticsearch集群安装</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="external">https://www.elastic.co/products/elasticsearch</a></p>
<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -zxvf elasticsearch-2.4.2.tar.gz</div><div class="line">mv elasticsearch-2.4.2 elasticsearch-2.4.2_1</div><div class="line">cd elasticsearch-2.4.2_1/config</div></pre></td></tr></table></figure>
<h2 id="安装head插件"><a href="#安装head插件" class="headerlink" title="安装head插件"></a>安装head插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/plugin install mobz/elasticsearch-head</div></pre></td></tr></table></figure>
<h2 id="配置config"><a href="#配置config" class="headerlink" title="配置config"></a>配置config</h2><p>这里集群包含3台服务器</p>
<h3 id="elasticsearch-2-4-2-1的配置"><a href="#elasticsearch-2-4-2-1的配置" class="headerlink" title="elasticsearch-2.4.2_1的配置"></a>elasticsearch-2.4.2_1的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cluster.name: es-cluster</div><div class="line">node.name: node-1</div><div class="line">network.host: 你的服务器ip地址</div><div class="line">http.port: 9211</div><div class="line">transport.tcp.port: 9311</div><div class="line">#过期时间</div><div class="line">index.cache.field.expire: 1d</div><div class="line">#默认类型为resident， 字面意思是常驻（居民）， 一直增加，直到内存 耗尽。 改为soft就是当内存不足的时候，先clear掉 占用的，然后再   往内存中放。设置为soft后，相当于设置成了相对的内存大小。resident的话，除非内存够大。 </div><div class="line">index.cache.field.type: soft</div><div class="line">#可能是因为我使用的服务器已经有了一个elasticsearch集群的原因，这里不写集群地址，集群启动后无法建立，原因待查</div><div class="line">discovery.zen.ping.unicast.hosts: [&quot;你的服务器列表（TCP端口哦）&quot;, &quot;你的服务器列表（TCP端口哦）&quot;,&quot;你的服务器列表（TCP端口哦）&quot;]</div></pre></td></tr></table></figure>
<h3 id="elasticsearch-2-4-2-21的配置（只写了不同的部分）"><a href="#elasticsearch-2-4-2-21的配置（只写了不同的部分）" class="headerlink" title="elasticsearch-2.4.2_21的配置（只写了不同的部分）"></a>elasticsearch-2.4.2_21的配置（只写了不同的部分）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">node.name: node-2</div><div class="line">http.port: 9212</div><div class="line">transport.tcp.port: 9312</div></pre></td></tr></table></figure>
<h3 id="elasticsearch-2-4-2-3的配置（只写了不同的部分）"><a href="#elasticsearch-2-4-2-3的配置（只写了不同的部分）" class="headerlink" title="elasticsearch-2.4.2_3的配置（只写了不同的部分）"></a>elasticsearch-2.4.2_3的配置（只写了不同的部分）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">node.name: node-3</div><div class="line">http.port: 9213</div><div class="line">transport.tcp.port: 9313</div></pre></td></tr></table></figure>
<p>后台启动3台服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/elasticsearch &amp;</div></pre></td></tr></table></figure></p>
<p><img src="http://i.imgur.com/2pa0psa.png" alt=""></p>
<blockquote>
<p>注意要讲elasticsearch所有文件用户赋给elasticsearch用户，否则没权限。<br>这是出于系统安全考虑设置的条件。由于ElasticSearch可以接收用户输入的脚本并且执行，为了系统安全考虑。<br><code>chown -R elasticsearch elasticsearch2.4.0</code></p>
<p>如果出现<code>curl 127.0.0.1:9211</code>可以正常访问，<code>curl 本机IP地址:9211</code>不能访问的问题，则需要在conf文件中配置<code>network.host: 你的服务器ip地址</code>。参考：<code>ss -l</code>命令</p>
</blockquote>
<h1 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h1><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><ol>
<li>读取文件方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">		type =&gt; &quot;infolog&quot;</div><div class="line">        #监听文件的路径</div><div class="line">        path =&gt; &quot;你的日志路径*.log&quot;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    file &#123;</div><div class="line">		type =&gt; &quot;errorlog&quot;  </div><div class="line">        #监听文件的路径</div><div class="line">        path =&gt; &quot;你的日志路径*.log&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">    multiline &#123;  </div><div class="line">	   pattern =&gt; &quot;^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;\s\d&#123;1,2&#125;:\d&#123;1,2&#125;:\d&#123;1,2&#125;&quot;</div><div class="line">	   negate =&gt; true</div><div class="line">	   what =&gt; &quot;previous&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">	if [type] == &quot;infolog&quot; &#123;</div><div class="line">		elasticsearch &#123;</div><div class="line">			action =&gt; &quot;index&quot;          #The operation on ES</div><div class="line">			hosts  =&gt; [&quot;elasticsearch的IP地址:9211&quot;, &quot;elasticsearch的IP地址:9212&quot;,&quot;elasticsearch的IP地址:9213&quot;]   #ElasticSearch host, can be array.</div><div class="line">			index  =&gt; &quot;apilog&quot;         #The index to write data to.</div><div class="line">		&#125;</div><div class="line">	&#125;else&#123;</div><div class="line">		elasticsearch &#123;</div><div class="line">			action =&gt; &quot;index&quot;          #The operation on ES</div><div class="line">			hosts  =&gt; [&quot;elasticsearch的IP地址:9211&quot;, &quot;elasticsearch的IP地址:9212&quot;,&quot;elasticsearch的IP地址:9213&quot;]   #ElasticSearch host, can be array.</div><div class="line">			index  =&gt; &quot;apierrorlog&quot;         #The index to write data to.</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>说明：multiline的作用是为了处理错误日志的，使得错误堆栈信息作为一条记录显示。这里可能导致无法创建多线程，只能以单线程运行，解决办法参考我的另一篇文章<a href="http://liubenlong.github.io/2016/11/29/ELK-ELK-%E4%B9%8B-nginx%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/">ELK 之 nginx日志分析</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">    multiline &#123;  </div><div class="line">	   pattern =&gt; &quot;^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;\s\d&#123;1,2&#125;:\d&#123;1,2&#125;:\d&#123;1,2&#125;&quot;</div><div class="line">	   negate =&gt; true</div><div class="line">	   what =&gt; &quot;previous&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>还可以直接与log4j配合使用，直接将日志输出到logstash中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">log4j.logger.包名=debug, socket</div><div class="line"></div><div class="line"># appender socket</div><div class="line">log4j.appender.socket=org.apache.log4j.net.SocketAppender</div><div class="line">log4j.appender.socket.Port=$&#123;elk_port&#125;</div><div class="line">log4j.appender.socket.RemoteHost=$&#123;elk_ip&#125;</div><div class="line">log4j.appender.socket.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.socket.layout.ConversionPattern=%d [%-5p] [%l] %m%n</div><div class="line">log4j.appender.socket.ReconnectionDelay=10000</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/logstash agent -f config/log4j_to_es.conf &amp;</div></pre></td></tr></table></figure>
<h1 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h1><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">server.port: 5601</div><div class="line">server.host: &quot;你的IP地址&quot;</div><div class="line">elasticsearch.url: &quot;http://你的IP地址:9211&quot;</div><div class="line">kibana.index: &quot;.kibana&quot;</div></pre></td></tr></table></figure>
<h2 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup bin/kibana &amp;</div></pre></td></tr></table></figure>
<blockquote>
<p> 但是nohup在使用时还需要注意一些问题：<br>1、当输入nohup  COMMAND &amp;  命令后，需要按任意键返回到shell窗口<br>2、退出当前登录窗口用exit命令，不要直接点击窗口上的叉来关闭</p>
</blockquote>
<h2 id="配置索引"><a href="#配置索引" class="headerlink" title="配置索引"></a>配置索引</h2><p>进入kibana，配置好在logstash中配置的索引</p>
<p><img src="http://i.imgur.com/BWKBn2b.png" alt=""></p>
<p><img src="http://i.imgur.com/lULCUdE.png" alt=""></p>
<hr>
<p>到此为止，ELK环境搭建完毕。<br>后续会继续写ELK的具体使用教程，敬请期待</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://www.tuicool.com/articles/YR7RRr" target="_blank" rel="external">ELK(ElasticSearch, Logstash, Kibana)搭建实时日志分析平台</a></li>
<li><a href="http://blog.csdn.net/huwei2003/article/details/47004745" target="_blank" rel="external">Elasticsearch部分节点不能发现集群(脑裂)问题处理</a></li>
<li><a href="http://www.mamicode.com/info-detail-873117.html" target="_blank" rel="external">ElasticSearch集群服务器配置</a></li>
<li><a href="http://blog.csdn.net/jiuqiyuliang/article/details/51244006" target="_blank" rel="external">ElasticSearch教程（三）————ElasticSearch集群搭建</a></li>
<li><a href="http://baidu.blog.51cto.com/71938/1676798" target="_blank" rel="external">源实时日志分析ELK平台部署</a></li>
<li><a href="http://www.cnblogs.com/yincheng/p/logstash.html" target="_blank" rel="external">logstash日志分析的配置和使用</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本环境&quot;&gt;&lt;a href=&quot;#基本环境&quot; class=&quot;headerlink&quot; title=&quot;基本环境&quot;&gt;&lt;/a&gt;基本环境&lt;/h1&gt;&lt;p&gt;Linux系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elasticsearch-2.4.2.tar.gz&lt;/li&gt;
&lt;li&gt;logst
    
    </summary>
    
      <category term="ELK" scheme="ttp://liubenlong.github.io/categories/ELK/"/>
    
    
      <category term="环境搭建" scheme="ttp://liubenlong.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="ELK" scheme="ttp://liubenlong.github.io/tags/ELK/"/>
    
      <category term="elasticsearch" scheme="ttp://liubenlong.github.io/tags/elasticsearch/"/>
    
      <category term="kibana" scheme="ttp://liubenlong.github.io/tags/kibana/"/>
    
      <category term="logstash" scheme="ttp://liubenlong.github.io/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github博客环境搭建</title>
    <link href="ttp://liubenlong.github.io/2016/11/22/hexo+github%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>ttp://liubenlong.github.io/2016/11/22/hexo+github环境搭建/</id>
    <published>2016-11-22T13:31:42.000Z</published>
    <updated>2016-12-14T06:34:08.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><pre><code>hexo new &quot;postName&quot; #新建文章
hexo new page &quot;pageName&quot; #新建页面
hexo generate #生成静态页面至public目录
hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）
hexo deploy #将.deploy目录部署到GitHub
hexo help  # 查看帮助
hexo version  #查看Hexo的版本
</code></pre><p>命令简写为：</p>
<pre><code>hexo deploy -g  #生成加部署
hexo server -g  #生成加预览
hexo n == hexo new
hexo g == hexo generate
hexo s == hexo server
hexo d == hexo deploy
</code></pre><h1 id="引用本地图片问题"><a href="#引用本地图片问题" class="headerlink" title="引用本地图片问题"></a>引用本地图片问题</h1><p>由于本人不会nodejs，所以写了一个java版本的图片迁移工具，直接在hexo博客目录下运行 <code>java -jar hexo_lbl-1.0-SNAPSHOT.jar</code> 即可<br>改jar包以及源代码已经提交到github上 <a href="https://github.com/liubenlong/hexo-blog" target="_blank" rel="external">https://github.com/liubenlong/hexo-blog</a></p>
<blockquote>
<p>注意 往github上发布之前，要先安装插件  <code>npm install hexo-deployer-git --save</code></p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="external">Hexo搭建Github静态博客</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">next主题官网</a></li>
<li><a href="http://www.jianshu.com/p/5e0ca2b14815" target="_blank" rel="external">升级hexo碰到“Deployer not found”问题及解决</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;hexo new &amp;quot;postName&amp;quot; #新建文章
hexo new page &amp;quo
    
    </summary>
    
      <category term="hexo" scheme="ttp://liubenlong.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="ttp://liubenlong.github.io/tags/hexo/"/>
    
      <category term="环境搭建" scheme="ttp://liubenlong.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>springboot由浅入深（一）helloWord</title>
    <link href="ttp://liubenlong.github.io/2016/11/22/spring/spring%20boot/springboot%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%EF%BC%88%E4%B8%80%EF%BC%89HelloWord/"/>
    <id>ttp://liubenlong.github.io/2016/11/22/spring/spring boot/springboot由浅入深（一）HelloWord/</id>
    <published>2016-11-22T13:31:42.000Z</published>
    <updated>2016-11-22T10:23:57.475Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="springboot" scheme="ttp://liubenlong.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="ttp://liubenlong.github.io/tags/springboot/"/>
    
      <category term="spring" scheme="ttp://liubenlong.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>关于Integer数值比较的问题以及不可变对象</title>
    <link href="ttp://liubenlong.github.io/2016/08/10/JDK%E6%BA%90%E7%A0%81%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/%E5%85%B3%E4%BA%8EInteger%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/"/>
    <id>ttp://liubenlong.github.io/2016/08/10/JDK源码深入学习/关于Integer数值比较的问题以及不可变对象/</id>
    <published>2016-08-09T16:00:00.000Z</published>
    <updated>2016-12-14T03:47:18.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写这篇文章是因为在之前的项目中通过findbugs进行代码优化，爆出的问题。其实我们的代码中暗藏危机，只是没有暴露出来而已</p>
<blockquote>
<p>我这里使用jdk7</p>
</blockquote>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        Integer a = <span class="number">10</span>;</div><div class="line">        Integer b = <span class="number">10</span>;</div><div class="line">        System.out.println(<span class="string">"a == b  "</span> + (a == b));</div><div class="line">        System.out.println(<span class="string">"a.equals(b)  "</span> + (a.equals(b)));</div><div class="line">        System.out.println(<span class="string">"a.intValue() == b.intValue()  "</span> + (a.intValue() == b.intValue()));</div><div class="line">        System.out.println(<span class="string">"a.compareTo(b)  "</span> + (a.compareTo(b)));</div><div class="line">        System.out.println(<span class="string">"---------"</span>);</div><div class="line"></div><div class="line">        a = <span class="keyword">new</span> Integer(<span class="number">10</span>);</div><div class="line">        b = <span class="keyword">new</span> Integer(<span class="number">10</span>);</div><div class="line">        System.out.println(<span class="string">"a == b  "</span> + (a == b));</div><div class="line">        System.out.println(<span class="string">"a.equals(b)  "</span> + (a.equals(b)));</div><div class="line">        System.out.println(<span class="string">"a.intValue() == b.intValue()  "</span> + (a.intValue() == b.intValue()));</div><div class="line">        System.out.println(<span class="string">"a.compareTo(b)  "</span> + (a.compareTo(b)));</div><div class="line">        System.out.println(<span class="string">"---------"</span>);</div><div class="line"></div><div class="line">        a = <span class="number">189</span>;</div><div class="line">        b = <span class="number">189</span>;</div><div class="line">        System.out.println(<span class="string">"a == b  "</span> + (a == b));</div><div class="line">        System.out.println(<span class="string">"a.equals(b)  "</span> + (a.equals(b)));</div><div class="line">        System.out.println(<span class="string">"a.intValue() == b.intValue()  "</span> + (a.intValue() == b.intValue()));</div><div class="line">        System.out.println(<span class="string">"a.compareTo(b)  "</span> + (a.compareTo(b)));</div><div class="line">        System.out.println(<span class="string">"---------"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> m = <span class="number">189</span>;</div><div class="line">        <span class="keyword">int</span> n = <span class="number">189</span>;</div><div class="line">        System.out.println(m == n);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>运行结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">a == b  <span class="keyword">true</span></div><div class="line">a.equals(b)  <span class="keyword">true</span></div><div class="line">a.intValue() == b.intValue()  <span class="keyword">true</span></div><div class="line">a.compareTo(b)  <span class="number">0</span></div><div class="line">---------</div><div class="line">a == b  <span class="keyword">false</span></div><div class="line">a.equals(b)  <span class="keyword">true</span></div><div class="line">a.intValue() == b.intValue()  <span class="keyword">true</span></div><div class="line">a.compareTo(b)  <span class="number">0</span></div><div class="line">---------</div><div class="line">a == b  <span class="keyword">false</span></div><div class="line">a.equals(b)  <span class="keyword">true</span></div><div class="line">a.intValue() == b.intValue()  <span class="keyword">true</span></div><div class="line">a.compareTo(b)  <span class="number">0</span></div><div class="line">---------</div><div class="line"><span class="keyword">true</span></div></pre></td></tr></table></figure></p>
<p>奇不奇怪，为什么会酱紫呢？</p>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>我们都知道，在java中<code>==</code>是比较的两个对象所指向的内存地址是否相等，而<code>equals</code>方法比较的是值。如果按照这个理论，上面的结果中可以看出<code>Integer a = 10;Integer b = 10;</code>这两个对象内存地址是同一个，也就是a和b两个引用指向同一个对象。而<code>Integer a = 189;Integer b = 189;</code>中，a和b两个引用指向了两个不同的对象。真的是这样吗？为什么呢？</p>
<p>我们查看<code>Integer</code>的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Cache to support the object identity semantics of autoboxing for values between</div><div class="line">     * -128 and 127 (inclusive) as required by JLS.</div><div class="line">     *</div><div class="line">     * The cache is initialized on first usage.  The size of the cache</div><div class="line">     * may be controlled by the -XX:AutoBoxCacheMax=&lt;size&gt; option.</div><div class="line">     * During VM initialization, java.lang.Integer.IntegerCache.high property</div><div class="line">     * may be set and saved in the private system properties in the</div><div class="line">     * sun.misc.VM class.</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line"></div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            <span class="comment">// high value may be configured by property</span></div><div class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">            String integerCacheHighPropValue =</div><div class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">                i = Math.max(i, <span class="number">127</span>);</div><div class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></div><div class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            high = h;</div><div class="line"></div><div class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> j = low;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an &#123;<span class="doctag">@code</span> Integer&#125; instance representing the specified</div><div class="line">     * &#123;<span class="doctag">@code</span> int&#125; value.  If a new &#123;<span class="doctag">@code</span> Integer&#125; instance is not</div><div class="line">     * required, this method should generally be used in preference to</div><div class="line">     * the constructor &#123;<span class="doctag">@link</span> #Integer(int)&#125;, as this method is likely</div><div class="line">     * to yield significantly better space and time performance by</div><div class="line">     * caching frequently requested values.</div><div class="line">     *</div><div class="line">     * This method will always cache values in the range -128 to 127,</div><div class="line">     * inclusive, and may cache other values outside of this range.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>  i an &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Integer&#125; instance representing &#123;<span class="doctag">@code</span> i&#125;.</div><div class="line">     * <span class="doctag">@since</span>  1.5</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</div><div class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The value of the &#123;<span class="doctag">@code</span> Integer&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@serial</span></div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructs a newly allocated &#123;<span class="doctag">@code</span> Integer&#125; object that</div><div class="line">     * represents the specified &#123;<span class="doctag">@code</span> int&#125; value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   value   the value to be represented by the</div><div class="line">     *                  &#123;<span class="doctag">@code</span> Integer&#125; object.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>通过这段源码可知：</p>
<ul>
<li>Integer是<strong>不可变对象</strong>，因为里面的value是final的<code>private final int value;</code></li>
<li>-128到127之间的数据放到了<code>IntegerCache</code>中，<code>IntegerCache</code>是<code>static</code>的，因此将会放到常量池中作为缓存使用</li>
</ul>
<p>因此可知，<code>Integer a = 10;Integer b = 10;</code>这两个对象其实是从<code>IntegerCache</code>缓存中取的，是同一个对象，地址肯定是相同的。而<code>Integer a = 189;Integer b = 189;</code>是创建的两个新的对象，因此地址肯定不同啦</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p><strong>永远不要用<code>==</code>比较integer对象</strong>，以避免一些偶发不可预测的错误。</p>
<h1 id="其他与此相关的知识点"><a href="#其他与此相关的知识点" class="headerlink" title="其他与此相关的知识点"></a>其他与此相关的知识点</h1><h2 id="Object与Integer比较"><a href="#Object与Integer比较" class="headerlink" title="Object与Integer比较"></a><code>Object</code>与<code>Integer</code>比较</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Object o1 = <span class="number">10</span>;</div><div class="line">Integer o2 = <span class="number">10</span>;</div><div class="line">System.out.println(o1 == o2);</div><div class="line"></div><div class="line">Object o3 = <span class="number">200</span>;</div><div class="line">Integer o4 = <span class="number">200</span>;</div><div class="line">System.out.println(o3 == o4);</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">true</div><div class="line">false</div></pre></td></tr></table></figure></p>
<p>原因与上面的一样。</p>
<blockquote>
<p><strong> jdk8中上面代码编译可是不通过的吆</strong></p>
</blockquote>
<p><img src="http://liubenlong.github.io/images/QQ截图20161214104324.png" alt=""></p>
<h2 id="锁相关"><a href="#锁相关" class="headerlink" title="锁相关"></a>锁相关</h2><blockquote>
<p>我们都知道用于加锁的对象必须是<strong>不可变对象</strong>， 永远不要再不可变对象上加锁</p>
</blockquote>
<p>因此永远不要再<code>integer</code>对象上加锁，因为其实不可变对象<code>private final int value;</code>。当integer重新赋值或者进行了计算以后，得到的值是新创建的对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class Stu&#123;</div><div class="line">    private int a;</div><div class="line">    public int getA() &#123; return a; &#125;</div><div class="line">    public void setA(int a) &#123;</div><div class="line">        this.a = a;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Stu stu = new Stu();</div><div class="line">        stu.setA(1);</div><div class="line">        increase(stu);</div><div class="line">        increase(stu);</div><div class="line"></div><div class="line">        System.out.println(stu.getA());</div><div class="line">        System.out.println(&quot;---&quot;);</div><div class="line"></div><div class="line">        Integer a = 1;</div><div class="line">        increase(a);</div><div class="line">        increase(a);</div><div class="line">        System.out.println(a);</div><div class="line">    &#125;</div><div class="line">    //我们知道java方法传递对象是传引用的</div><div class="line">    public static void increase(Stu stu)&#123;</div><div class="line">        stu.setA(stu.getA() + 1);</div><div class="line">        System.out.println(stu.getA());</div><div class="line">    &#125;</div><div class="line">    public static void increase(Integer integer)&#123;</div><div class="line">        integer = integer + 1;</div><div class="line">        System.out.println(integer);//这个integer其实是新创建的一个对象，而不是参数传入进来的对象</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2</div><div class="line">3</div><div class="line">3</div><div class="line">---</div><div class="line">2</div><div class="line">2</div><div class="line">1</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;写这篇文章是因为在之前的项目中通过findbugs进行代码优化，爆出的问题。其实我们的代码中暗藏危机，只是没有暴露出来而已&lt;/p&gt;
&lt;blo
    
    </summary>
    
      <category term="java" scheme="ttp://liubenlong.github.io/categories/java/"/>
    
    
      <category term="jdk" scheme="ttp://liubenlong.github.io/tags/jdk/"/>
    
      <category term="java" scheme="ttp://liubenlong.github.io/tags/java/"/>
    
  </entry>
  
</feed>
